TunePlotANN
tune_results_ANN
tune_results_ANN <- getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain")) %>%
select(c("task.id", "max.number.of.layers", "hidden", "learningrate", "batchsize", "momentum", "visible_dropout"))
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = task.id) %>% mutate(value = as.factor(value)), aes(x = value, fill = variable, color = variable)) +
geom_bar(aes(group = task.id)) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
tune_results_ANN <- getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain"))
names(tune_results_ANN)
tune_results_ANN <- getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain")) %>%
select(c("task.id", "max.number.of.layers", "hidden", "learningrate", "batchsize", "momentum", "visible_dropout"))
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = variable, color = variable)) +
geom_bar(aes(group = task.id)) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
tune_results_ANN
TunePlotANN
head(TunePlotANN)
head(tune_results_ANN)
head(melt(tune_results_ANN, id.vars = "task.id"))
ggplot(melt(tune_results_ANN, id.vars = "task.id"), aes(x = value, fill = variable, color = variable)) +
geom_bar(aes(group = task.id))
ggplot(melt(tune_results_ANN, id.vars = "task.id"), aes(x = value, fill = variable, color = variable)) +
geom_bar(aes(group = task.id)) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
ggplot(melt(tune_results_ANN, id.vars = "task.id"), aes(x = value, fill = task.id, color = task.id)) +
geom_bar() +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
ggplot(melt(tune_results_ANN, id.vars = "task.id"), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(stat="identity", position=position_dodge()) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
ggplot(melt(tune_results_ANN, id.vars = "task.id"), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge()) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge()) +
ggpubr::theme_pubr() +
facet_wrap(~ variable, scales = "free_x")
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge()) +
ggpubr::theme_pubr() +
labs(x = "")
facet_wrap(~ variable, scales = "free_x")
ggplotly(TunePlotANN)
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge()) +
ggpubr::theme_pubr() +
labs(x = "") +
facet_wrap(~ variable, scales = "free_x")
ggplotly(TunePlotANN)
tune_results_ANN <- getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain")) %>%
select(c("task.id", "max.number.of.layers", "hidden", "learningrate", "batchsize", "momentum", "visible_dropout"))
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge()) +
ggpubr::theme_pubr() +
labs(x = "") +
facet_wrap(~ variable, scales = "free_x")
ggplotly(TunePlotANN, tooltip = c("value", "count"))
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge2()) +
ggpubr::theme_pubr() +
labs(x = "") +
facet_wrap(~ variable, scales = "free_x")
ggplotly(TunePlotANN, tooltip = c("value", "count"))
dim(tune_results_ANN)
5*100
names(tune_results_ANN)
tune_results_ANN %>% filter(task.id == "SFE")
dim(tune_results_ANN %>% filter(task.id == "SFE"))
tune_results_ANN <- getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain"))
dim(tune_results_ANN)
names(tune_results_ANN)
table(tune_results_ANN$iter)
head(tune_results_ANN)
head(getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain", "svm")))
tune_results_ANN <- unique(getBMRTuneResults(BMR, as.df = T, learner.ids = c("nnTrain"))) %>%
select(c("task.id", "max.number.of.layers", "hidden", "learningrate", "batchsize", "momentum", "visible_dropout"))
TunePlotANN <- ggplot(melt(tune_results_ANN, id.vars = "task.id") %>% mutate(value = as.factor(value)), aes(x = value, fill = task.id, color = task.id)) +
geom_bar(position=position_dodge2()) +
ggpubr::theme_pubr() +
labs(x = "") +
facet_wrap(~ variable, scales = "free_x")
ggplotly(TunePlotANN, tooltip = c("value", "count"))
library("tmaptools")
tmaptools::palette_explorer()
get_brewer_pal("Blues", n = 7, contrast = c(0.4, 1))
l<-get_brewer_pal("Blues", n = 7, contrast = c(0.4, 1))
l
tmaptools::palette_explorer()
require("knitr")
opts_knit$set(root.dir = "~/research/exploitation/R/classification")
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE)
library("dplyr")
library("reshape2")
library("ggplot2")
library("philentropy")
library("abind")
library("factoextra")
library("oce")
library("plotly")
library("latex2exp")
library("ggdark")
library("tmap")
library("OpenStreetMap")
library("colorspace")
library("leaflet")
library("scales")
import::here(.from = "./R/utils/lib_classification.R",
get_HG_aes)
import::here(.from = "./R/utils/lib_regional_comparison.R",
make_model_building,
range01,
get_field_data_df,
pfun,
get_lp_dist,
BMRViz,
MostCommonHyperpar,
BMRTuneViz,
get_BMR,
get_lrnH,
get_TunePlotANN,
get_p_lrnH,
get_agg_metrics,
get_ML_performance,
get_Y2_region_data,
get_drivers,
ML_perf_drivers_scatterplot,
make_corr_plot,
get_p_res,
layout_ggplotly
)
regional_map <- readRDS("regional_map.Rds")
regional_map
autocorr <- readRDS("./autocorr.Rds")
p <- ggplot(autocorr$g, aes(x = r, color = region)) +
geom_line(aes(y = trans)) +
geom_hline(yintercept = 1) +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
) +
ylim(0, 20) +
labs(x = "radius (m)", y = "pairwise correlation function") +
ggpubr::theme_pubr()
p
l <- get_field_data_df()
field_data_df <- l$field_data_df
mut_keep <- l$mut_keep
sreg <- sort(unique(field_data_df$region))
density_plots <- group_map(field_data_df, ~ pfun(., plot = T))
lp_dist <- get_lp_dist(field_data_df, sreg)
i <- 1
ggplotly(lp_dist[[i]]$p)
ggplotly(density_plots[[i]], tooltip = c("value", "scaled", "ward.grp")) %>% layout_ggplotly(x = -0.05, y = 0)
i <- 6
ggplotly(lp_dist[[i]]$p)
sreg
get_field_data_df <- function(){
csv.dir <- "./data/classified_reach_scale_sites/"
lf <- list.files(file.path(csv.dir), pattern = ".csv", full.names = TRUE)
.lf <- list.files(file.path(csv.dir), pattern = ".csv", full.names = FALSE)
.lf <- unname(sapply(.lf, function(f) unlist(strsplit(f, "_"))[[1]]))
lf <- lf[order(.lf)]
reg <- c("NCC", "NC", "SAC", "SFE", "SC", "SJT", "K") %>% sort()
ind <- sapply(lf, function(f) any(sapply(reg, function(r) grepl(paste0("/",r, "_"), f, fixed = TRUE))))
ldf <- lapply(lf[ind], read.csv)
tab <- table(unlist(lapply(ldf, names)))
keep <- c(names(tab)[tab == length(reg)], "region")
ldf <- lapply(seq_along(ldf), function(i) mutate(ldf[[i]], region = reg[i], ward.grp = paste0(reg[i], ifelse(ward.grp < 10, "0", ""), ward.grp)) %>% select(keep))
field_data_df <- do.call(rbind, ldf) %>% select(-c("Ac", "slope", "vc.dist"))
mut_keep <- colnames(field_data_df)[!colnames(field_data_df) %in% c("ward.grp", "region")]
field_data_df <- group_by(field_data_df, region) %>% mutate_at(mut_keep, range01)
return(list(field_data_df = field_data_df,mut_keep = mut_keep))
}
l <- get_field_data_df()
field_data_df <- l$field_data_df
mut_keep <- l$mut_keep
sreg <- sort(unique(field_data_df$region))
density_plots <- group_map(field_data_df, ~ pfun(., plot = T))
lp_dist <- get_lp_dist(field_data_df, sreg)
sreg
field_data_df
l <- get_field_data_df()
field_data_df <- l$field_data_df
mut_keep <- l$mut_keep
sreg <- sort(unique(field_data_df$region))
density_plots <- group_map(field_data_df, ~ pfun(., plot = T))
lp_dist <- get_lp_dist(field_data_df, sreg)
length(density_plots)
density_plots[[1]]
density_plots[[2]]
density_plots[[3]]
density_plots[[5]]
density_plots[[5]]
density_plots[[4]]
density_plots[[6]]
density_plots[[7]]
l <- get_field_data_df()
field_data_df <- l$field_data_df
mut_keep <- l$mut_keep
sreg <- sort(unique(field_data_df$region))
density_plots <- group_map(field_data_df, ~ pfun(., plot = T))
lp_dist <- get_lp_dist(field_data_df, sreg)
density_plots[[1]]
density_plots[[7]]
l <- get_field_data_df()
field_data_df <- l$field_data_df
mut_keep <- l$mut_keep
sreg <- sort(unique(field_data_df$region))
density_plots <- group_map(field_data_df, ~ pfun(., plot = T))
lp_dist <- get_lp_dist(field_data_df, sreg)
i <- 1
ggplotly(lp_dist[[i]]$p)
ggplotly(density_plots[[i]], tooltip = c("value", "scaled", "ward.grp")) %>% layout_ggplotly(x = -0.05, y = 0)
require("knitr")
opts_knit$set(root.dir = "~/research/exploitation/R/classification")
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE)
library("dplyr")
library("reshape2")
library("ggplot2")
library("philentropy")
library("abind")
library("factoextra")
library("oce")
library("plotly")
library("latex2exp")
library("ggdark")
library("tmap")
library("OpenStreetMap")
library("colorspace")
library("leaflet")
library("scales")
import::here(.from = "./R/utils/lib_classification.R",
get_HG_labels)
import::here(.from = "./R/utils/lib_regional_comparison.R",
make_model_building,
range01,
get_field_data_df,
pfun,
get_lp_dist,
BMRViz,
MostCommonHyperpar,
BMRTuneViz,
get_BMR,
get_lrnH,
get_TunePlotANN,
get_p_lrnH,
get_agg_metrics,
get_ML_performance,
get_Y2_region_data,
get_drivers,
ML_perf_drivers_scatterplot,
make_corr_plot,
get_p_res,
layout_ggplotly,
get_median_table,
get_HG_colors,
get_HG_aes,
range01
)
prediction_map <- readRDS("prediction_map.Rds")
prediction_map
tmap_mode("view")
prediction_map
setwd("/media/hguillon/hrvg/research/exploitation/R/latin_america")
trainingData <- readRDS("trainingData.Rds")
library("mlr")
target <- "countryLabel"
set.seed(1789)
scale.task <- makeClassifTask(data = trainingData, target = target)
print(scale.task)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.svm <- makeLearner("classif.svm", predict.type="prob")
lrn.knn <- makeLearner("classif.IBk", predict.type="prob")
lrn.nn <- makeLearner("classif.nnet", predict.type="prob")
lrn.multinom <- makeLearner("classif.multinom", predict.type="prob")
lrns <- list(lrn.rf, lrn.svm, lrn.knn, lrn.nn, lrn.multinom)
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
bmr <- benchmark(lrns, scale.task, rdesc, measures = list(acc, mmce, multiclass.au1u, multiclass.aunu), keep.pred = TRUE)
install.package("randomForest")
install.packages("randomForest")
install.packages("RWeka")
set.seed(1789)
scale.task <- makeClassifTask(data = trainingData, target = target)
print(scale.task)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.svm <- makeLearner("classif.svm", predict.type="prob")
lrn.knn <- makeLearner("classif.IBk", predict.type="prob")
lrn.nn <- makeLearner("classif.nnet", predict.type="prob")
lrn.multinom <- makeLearner("classif.multinom", predict.type="prob")
lrns <- list(lrn.rf, lrn.svm, lrn.knn, lrn.nn, lrn.multinom)
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
bmr <- benchmark(lrns, scale.task, rdesc, measures = list(acc, mmce, multiclass.au1u, multiclass.aunu), keep.pred = TRUE)
bmr
plotBMRBoxplots(bmr, style = "violin", measure = mes, pretty.names = FALSE) +
ggpubr::theme_pubr()
plotBMRBoxplots(bmr, style = "violin", measure = "acc.test.mean", pretty.names = FALSE) +
ggpubr::theme_pubr()
plotBMRBoxplots(bmr, style = "violin", measure = acc.test.mean, pretty.names = FALSE) +
ggpubr::theme_pubr()
plotBMRBoxplots(bmr, style = "violin")
plotBMRBoxplots(bmr, style = "violin", mes = multiclass.aunu)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.aunu)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.au1u)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.au1n)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.an1n)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.au1u)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.au1n)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.an1n)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.aunu)
plotBMRBoxplots(bmr, style = "violin", measure =  multiclass.aunu) + ggpubr::theme_pubr()
# select learner
lrn <- lrn.rf
# set hyper-parameter space
params <- makeParamSet(
makeIntegerParam("mtry",lower = 1, upper = (ncol(trainingData) - 1) %/% 2)
)
# set resampling strategy
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
# set optimization technique
ctrl <- makeTuneControlGrid(resolution=20L)
# start tuning
tune <- tuneParams(learner = lrn, task = scale.task,
resampling = rdesc,
measures = list(acc, mmce, multiclass.au1u, multiclass.aunu),
par.set = params,
control = ctrl,
show.info = TRUE)
lrn
ctrl <- makeTuneControlGrid(resolution = grid_resolution)
ctrl <- makeTuneControlGrid(resolution = 20)
ctrl <- makeTuneControlGrid(resolution = 3)
ctrl <- makeTuneControlGrid(resolution = 3)target <- "countryLabel"
scale.task <- makeClassifTask(data = trainingData, target = target)
target <- "countryLabel"
scale.task <- makeClassifTask(data = trainingData, target = target)
grid_resolution <- 3
ctrl <- makeTuneControlGrid(resolution = grid_resolution)
ps <- makeParamSet(
makeDiscreteParam("mtry", values = par_range$mtry)
)
mes <- list(acc, mmce, multiclass.au1u, multiclass.aunu)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.rf <- makeTuneWrapper(lrn.rf, measures = mes, ps, ctrl, show.info = info)
dim(trainingData)
ps <- makeParamSet(
makeDiscreteParam("mtry", values = seq(10,20))
)
ps
ctrl <- makeTuneControlGrid(resolution = grid_resolution)
ps <- makeParamSet(
makeDiscreteParam("mtry", values = seq(10,20))
)
mes <- list(acc, mmce, multiclass.au1u, multiclass.aunu)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.rf <- makeTuneWrapper(lrn.rf, measures = mes, ps, ctrl, show.info = info)
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = info)
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
lrn.rf
train(lrn.rf)
train(lrn.rf, scale.task)
grid_resolution
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, show.info = TRUE)
ctrl <- makeTuneControlGrid()
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
ctrl <- makeTuneControlGrid()
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
lrn.rf
s <- makeParamSet(
makeDiscreteParam("mtry", values = seq(10,20,5))
)
mes <- list(acc, mmce, multiclass.au1u, multiclass.aunu)
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
ctrl <- makeTuneControlGrid()
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
train(lrn.rf, scale.task)
ps
ps <- makeParamSet(
makeDiscreteParam("mtry", values = seq(10,20,5))
)
ps
ps <- makeParamSet(
makeDiscreteParam("mtry", values = seq(10,20,5))
)
mes <- list(acc, mmce, multiclass.au1u, multiclass.aunu)
rdesc <- makeResampleDesc("CV", iters = 5, stratify = TRUE)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
ctrl <- makeTuneControlGrid()
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
ps
train(lrn.rf, scale.task)
rdesc <- makeResampleDesc("Holdout", stratify = TRUE)
lrn.rf <- makeLearner("classif.randomForest", predict.type="prob")
ctrl <- makeTuneControlGrid()
lrn.rf <- makeTuneWrapper(lrn.rf, rdesc, measures = mes, ps, ctrl, show.info = TRUE)
train(lrn.rf, scale.task)
rdesc <- makeResampleDesc("CV", iters = 3, stratify = TRUE)
bmr <- benchmark(lrn.rf, scale.task, rdesc, measures = list(acc, mmce, multiclass.au1u, multiclass.aunu), keep.pred = TRUE)
bmr
bmr$measures
bmr$results$trainingData
bmr$results$trainingData$classif.randomForest.tuned$measures.test
bmr$results$trainingData$classif.randomForest.tuned$models
bmr <- benchmark(lrn.rf, scale.task, rdesc, measures = list(acc, mmce, multiclass.au1u, multiclass.aunu), keep.pred = TRUE, models = TRUE)
bmr$results$trainingData$classif.randomForest.tuned$models
generateHyperParsEffectData(bmr$results$trainingData$classif.randomForest.tuned)
generateHyperParsEffectData(bmr$results$trainingData$classif.randomForest.tuned$models)
generateHyperParsEffectData(bmr$results$trainingData$classif.randomForest.tuned$models[[1]])
generateHyperParsEffectData(bmr$results$trainingData$classif.randomForest.tuned$next.learner)
models <- getBMRModels(bmr, drop = TRUE)
tune.result = lapply(models, function(x) getTuneResult(x[[1]]))
lapply(tune.result, function(x) as.data.frame(x$opt.path))
getTuneResult(bmr)
getTuneResult(bmr$results$trainingData)
models
lapply(models, function(x) getTuneResult(x[[1]]))
lapply(models, function(x) getTuneResult(x)
)
z <- getBMRTuneResults(res)
lapply(z$trainingTask, function(x) generateHyperParsEffectData(x[[1]], partial.dep = T))
res <- bmr
z <- getBMRTuneResults(res)
lapply(z$trainingTask, function(x) generateHyperParsEffectData(x[[1]], partial.dep = T))
z
z
getBMRTuneResults(bmr)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
as.data.frame(tune.result[[1]]$opt.path)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
as.data.frame(tune.result[[2]]$opt.path)
generateHyperParsEffectData(models[[1]]
)
plotHyperParsEffect(as.data.frame(tune.result[[1]]$opt.path), x = "mtry", y = "acc.test.mean",
plot.type = "line")
generateHyperParsEffectData(tune.result[[1]])
models <-  getBMRModels(res, drop = TRUE)
tune.result <-  lapply(models, getTuneResult)
plotHyperParsEffect(generateHyperParsEffectData(tune.result[[1]]), x = "mtry", y = "acc.test.mean",
plot.type = "line")
as.data.frame(tune.result[[1]]$opt.path
)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, fgetTuneResult)
tune.df <- lapply(tune.result, function(x) as.data.frame(tune.result[[1]]$opt.path)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(tune.result, function(x) as.data.frame(tune.result[[1]]$opt.path)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(tune.result, function(x) as.data.frame(tune.result[[1]]$opt.path)
)
tune.df
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(seq_along(tune.result)) function(i){
df <- as.data.frame(tune.result[[i]]$opt.path
df$iter <- rep(i, nrow(df))
return(df)
)}
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(seq_along(tune.result)) function(i){
df <- as.data.frame(tune.result[[i]]$opt.path
df$iter <- rep(i, nrow(df))
return(df)
})
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(seq_along(tune.result)) function(i){
df <- as.data.frame(tune.result[[i]]$opt.path)
df$iter <- rep(i, nrow(df))
return(df)
})
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(seq_along(tune.result), function(i){
df <- as.data.frame(tune.result[[i]]$opt.path)
df$iter <- rep(i, nrow(df))
return(df)
})
tune.df
tune.df <- do.call(rbind, tune.df)
tune.df
ggplot(tune.df, aes(x = mtry, y = acc.test.mean, color = iter, group = iter)) + geom_lines()
library(ggplot2)
ggplot(tune.df, aes(x = mtry, y = acc.test.mean, color = iter, group = iter)) + geom_lines()
ggplot(tune.df, aes(x = mtry, y = acc.test.mean, color = iter, group = iter)) + geom_line()
ggplot(tune.df, aes(x = mtry, y = acc.test.mean, group = iter)) + geom_line()
models = getBMRModels(res, drop = TRUE)
tune.result = lapply(models, getTuneResult)
tune.df <- lapply(seq_along(tune.result), function(i){
df <- as.data.frame(tune.result[[i]]$opt.path)
df$iter <- rep(i, nrow(df))
return(df)
})
tune.df <- do.call(rbind, tune.df)
tune.df$iter <- as.factor(tune.df$iter)
ggplot(tune.df, aes(x = mtry, y = acc.test.mean, color = iter, group = iter)) + geom_line()
