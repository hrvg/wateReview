names(melted_scaf_source) <- c("Isoabsorbances", "Ws", "R2_Ws", "Wf", "R2_Wf", "FI")
melted_scaf_source$SCAF_ID <- unlist(lapply(chemical_data_source$SCAF_ID, function(ID) rep(ID, n_iso)))
melted_scaf_source$R2_FI <- melted_scaf_source$R2_Ws + melted_scaf_source$R2_Wf
p_hydrograph <- ggplot(usgs_data, aes(x = time, y = Discharge, color = Discharge)) +
theme_minimal() +
geom_line(size = 1) +
geom_point(data = chemical_data, aes(x = sample_datetime, y = Discharge), size = 2.5) +
theme(legend.position = "none") +
scale_color_viridis(begin = 0.1, end = 0.9, direction = -1) +
labs(x = "Time (hh:mm)", y = "Discharge (cfs)", title = "Discharge during Rio Icacos flood")
p_hydrograph
hydrograph_data_colors <- ggplot_build(p_hydrograph)$data[[2]]$colour
p_rainfall <- ggplot(usgs_data, aes(x = time, y = Rainfall, color = -Rainfall)) +
theme_minimal() +
geom_line(size = 1) +
theme(legend.position = "none") +
labs(x = "Time (hh:mm)", y = "Rainfall (in)", title = "Rainfall during Rio Icacos flood")
p_rainfall
viz_data_SCAF <- data.frame(
value = c(melted_scaf$Ws, melted_scaf$Wf, melted_scaf$FI),
R2 = c(melted_scaf$R2_Ws, melted_scaf$R2_Wf, melted_scaf$R2_FI),
variable = c(rep("Ws", nrow(melted_scaf)), rep("Wf", nrow(melted_scaf)), rep("FI", nrow(melted_scaf))),
sample_time = rep(melted_scaf$sample_time, 3),
SCAF_number = rep(melted_scaf$SCAF_number, 3),
Gage_Height = rep(melted_scaf$Gage_Height, 3),
Discharge = rep(melted_scaf$Discharge, 3)
)
viz_data_SCAF$variable <- factor(as.character(viz_data_SCAF$variable), levels = c("Ws", "Wf", "FI"))
viz_data_SCAF <- viz_data_SCAF[which(viz_data_SCAF$SCAF_number %in% c("5", "6")), ]
p1 <- ggplot(viz_data_SCAF, aes(x = value, fill = Discharge)) +
theme_minimal() +
geom_density(aes(y = ..scaled.. * 100, weight = R2)) +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
) +
coord_flip() +
facet_grid(variable ~ sample_time) +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
labs(x = "", y = "Density (%)", title = "SVD and FI during Rio Icacos flood")
q1 <- ggplot_build(p1)
repn <- unique(table(q1$data[[1]]$PANEL))
viz_data_SCAF_colors <- hydrograph_data_colors[which(chemical_data$SCAF_number %in% c("5", "6"))]
viz_data_SCAF_colors <- rep(sapply(viz_data_SCAF_colors, function(c) rep(c, repn)), 3)
q1$data[[1]]$fill <- viz_data_SCAF_colors
q1 <- ggplot_gtable(q1)
plot(q1)
density_data <- ggplot_build(p1)$data[[1]]
density_data <- density_data[which(density_data$PANEL %in% seq(13,18)), ]
mode_FI <- sapply(seq(13,18), function(pn){
df <- density_data[which(density_data$PANEL == pn), ]
10 ** df$x[which.max(df$y)]
})
print("FI modes during Rio Icacos flood:")
print(signif(mode_FI, 2))
viz_data_chem <- t(chemical_data[, grepl("Channel", colnames(chemical_data))])
n_channel <- nrow(viz_data_chem)
colnames(viz_data_chem) <- chemical_data$sample_time
# viz_data_chem <- viz_data_chem[, which(chemical_data$sample_time %in% viz_data_SCAF$sample_time)]
rownames(viz_data_chem) <- channel_diameter$Channel_Diameter
viz_data_chem <- melt(viz_data_chem)
colnames(viz_data_chem) <- c("channel_diameter", "sample_time", "value")
viz_data_chem$Gage_Height <- chemical_data$Gage_Height[match(viz_data_chem$sample_time, chemical_data$sample_time)]
viz_data_chem$value <- viz_data_chem$value
p2 <- ggplot(viz_data_chem, aes(x = channel_diameter, y = value, fill = -Gage_Height)) +
theme_minimal() +
geom_area() +
geom_line() +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
) +
coord_flip() +
geom_hline(yintercept = 0) +
facet_grid(. ~ sample_time) +
theme(legend.position = "none") +
labs(x = "Channel Diameter (um)", y = "Volume (%)", title = "GSD during Rio Icacos flood")
q2 <- ggplot_build(p2)
repn <- nrow(q2$data[[1]]) / max(as.numeric(q2$data[[1]]$PANEL))
# viz_data_SCAF_colors <- hydrograph_data_colors[which(chemical_data$SCAF_number %in% c("5", "6"))]
viz_data_SCAF_colors <- hydrograph_data_colors
viz_data_SCAF_colors <- unlist(lapply(viz_data_SCAF_colors, function(c) rep(c, repn)))
q2$data[[1]]$fill <- viz_data_SCAF_colors
q2 <- ggplot_gtable(q2)
plot(q2)
density_data <- ggplot_build(p2)$data[[1]]
mode_GSD <- sapply(seq(nrow(chemical_data)), function(pn){
df <- density_data[which(density_data$PANEL == pn), ]
df <- df[which(df$x <= 2), ]
10 ** df$x[which.max(df$y)]
})
print("GSD modes during Rio Icacos flood (um):")
print(signif(mode_GSD, 2))
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data <- chemical_data[, which(colnames(chemical_data) %in% keep)]
colnames(clustering_data) <- gsub("_pctmass", "", colnames(clustering_data))
correlation_data <- clustering_data
clustering_data$GSD <- mode_GSD
nearZeroVar(clustering_data, saveMetrics = TRUE)
clustering_data <- transform_data(clustering_data, methods = c("nzv"), uniqueCut = 50, freqCut = 3)
correlation_data <- clustering_data
mat <- as.matrix(correlation_data)
colnames(mat) <- colnames(correlation_data)
rownames(mat) <- sample_time
correlations <- Hmisc::rcorr(mat, type = "pearson")
correlations$r[which(correlations$P > 0.05)] <- 0
# I remove Dickite  vs FI correlation as Dickite is mostly null values
corrplot(correlations$r, type ="upper", method ="number")
correlations <- Hmisc::rcorr(mat, type = "spearman")
correlations$r[which(correlations$P > 0.05)] <- 0
corrplot(correlations$r, type ="upper", method ="number")
drops <- c("Discharge", "Rainfall")
clustering_data <- clustering_data[, !colnames(clustering_data) %in% drops]
mat <- as.matrix(clustering_data)
mat <- scale(mat)
colnames(mat) <- colnames(clustering_data)
rownames(mat) <- sample_time
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
print("Clustering Variables")
print(colnames(clustering_data))
print("Data matrix dimensions (rows columns):")
print(dim(mat))
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
p_dist <- fviz_dist(distance, gradient = list(low = "steelblue",  high = "white"), order = FALSE)
p_wss <- fviz_nbclust(df, kmeans, method = "wss", k.max = kmax)
p_sil <- fviz_nbclust(df, kmeans, method = "silhouette", k.max = kmax)
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25, K.max = kmax, B = 50)
p_gap <- fviz_gap_stat(gap_stat)
lay <-  rbind(c(1, 2), c(3, 4))
gridExtra::grid.arrange(grobs = list(p_dist, p_wss, p_sil, p_gap), layout_matrix = lay)
stab <- clValid(df, nClust = 2:kmax, clMethods = "kmeans",
validation = "stability")
summary(stab)
print("Optimal Number of Cluster under One Std Rule")
sd_measures <- apply(stab@measures, 1, sd)
min_measures <- apply(stab@measures, 1, min)
one_sd <- t(sapply(seq_along(sd_measures), function(i) min_measures[i] + sd_measures[i] > stab@measures[i, ,]))
optim_df <- data.frame(measure = stab@measNames, cluster = colnames(stab@measures)[apply(one_sd, 1, which.max)])
print(optim_df)
optik <- 2
k2 <- kmeans(df, centers = optik, nstart = 25)
pkm <- fviz_cluster(k2, geom = "text",  data = df) + theme_cowplot()
pkm
p_dist <- fviz_dist(distance, gradient = list(low = "steelblue",  high = "white"), order = FALSE)
p_wss <- fviz_nbclust(df, hcut, method = "wss", k.max = kmax)
p_sil <- fviz_nbclust(df, hcut, method = "silhouette", k.max = kmax)
gap_stat <- clusGap(df, FUN = hcut, nstart = 25, K.max = kmax, B = 50)
p_gap <- fviz_gap_stat(gap_stat)
lay <-  rbind(c(1, 2), c(3, 4))
gridExtra::grid.arrange(grobs = list(p_dist, p_wss, p_sil, p_gap), layout_matrix = lay)
stab <- clValid(df, nClust = 2:kmax, clMethods = "hierarchical",
validation = "stability")
summary(stab)
print("Optimal Number of Cluster under One Std Rule")
sd_measures <- apply(stab@measures, 1, sd)
min_measures <- apply(stab@measures, 1, min)
one_sd <- t(sapply(seq_along(sd_measures), function(i) min_measures[i] + sd_measures[i] > stab@measures[i, ,]))
optim_df <- data.frame(measure = stab@measNames, cluster = colnames(stab@measures)[apply(one_sd, 1, which.max)])
print(optim_df)
optik <- 2
res.hc <- eclust(df, "hclust", k = optik, graph = FALSE)
phc <- fviz_dend(res.hc, rect = TRUE, show_labels = TRUE)
phc
# # Compute clValid
clmethods <- c("hierarchical","kmeans")
stab <- clValid(df, nClust = 2, clMethods = clmethods,
validation = "stability")
# Display only optimal Scores
summary(stab)
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "SCAF_number", "Discharge", "Rainfall")
clustering_data <- chemical_data[, which(colnames(chemical_data) %in% keep)]
colnames(clustering_data) <- gsub("_pctmass", "", colnames(clustering_data))
clustering_data <- clustering_data[which(clustering_data$SCAF_number %in% c("5", "6")), ]
clustering_data$GSD <- mode_GSD[which(clustering_data$SCAF_number %in% c("5", "6"))]
clustering_data$SCAF_number <- NULL
clustering_data$FI <- mode_FI
nearZeroVar(clustering_data, saveMetrics = TRUE)
clustering_data <- transform_data(clustering_data, methods = c("nzv"), uniqueCut = 50, freqCut = 3)
correlation_data <- clustering_data
mat <- as.matrix(correlation_data)
colnames(mat) <- colnames(correlation_data)
rownames(mat) <- sample_time[which(chemical_data$SCAF_number %in% c("5", "6"))]
geom_segment_corrplot <- function(mat, corr_type = "spearman", var_index = NULL){
if (is.null(var_index)){
var_index <- ncol(mat)
}
if (corr_type == "spearman"){
ptitle <- "Spearman's rank correlation"
xlb <- bquote(~ rho)
} else {
ptitle <- "Pearson's rank correlation"
xlb <- bquote(~ r)
}
correlation_results <- Hmisc::rcorr(mat, type = corr_type)
correlation_results$r[which(correlation_results$P > 0.05)] <- 0
correlations <- correlation_results$r[1:(nrow(correlation_results$r) - 1), var_index]
pvalue <- correlation_results$P[1:(nrow(correlation_results$P) - 1), var_index]
correlations <- correlations[pvalue < 0.05]
pvalue <- pvalue[pvalue < 0.05]
if (length(pvalue) == 0){
warning(paste(corr_type, "correlation failed."))
return(NA)
}
correlations_df <- data.frame(var = names(correlations), correlation = unname(correlations), pvalue = unname(pvalue))
df <- correlations_df[order(-correlations_df$correlation), ]
p <-    ggplot(df) +
geom_point(aes(x=correlation, y=fct_reorder(var,correlation))) +
geom_segment(aes(x = 0, xend = correlation, y = fct_reorder(var,correlation), yend = fct_reorder(var,correlation))) +
labs(title = ptitle,
y = "variable", x = xlb) +
xlim(-1, 1) +
theme_cowplot()
return(list(p = p, res = df))
}
corr_pearson <- geom_segment_corrplot(mat, corr_type = "pearson")
if(!is.na(corr_pearson)) corr_pearson$p
corr_spearman <- geom_segment_corrplot(mat, corr_type = "spearman")
if(!is.na(corr_spearman)) corr_spearman$p
viz_data_SCAF_source <- data.frame(
value = c(melted_scaf_source$Ws, melted_scaf_source$Wf, melted_scaf_source$FI),
R2 = c(melted_scaf_source$R2_Ws, melted_scaf_source$R2_Wf, melted_scaf_source$R2_FI),
variable = c(rep("Ws", nrow(melted_scaf_source)), rep("Wf", nrow(melted_scaf_source)), rep("FI", nrow(melted_scaf_source))),
SCAF_ID = rep(melted_scaf_source$SCAF_ID, 3)
)
viz_data_SCAF_source$variable <- factor(as.character(viz_data_SCAF_source$variable), levels = c("Ws", "Wf", "FI"))
p1 <- ggplot(viz_data_SCAF_source, aes(x = value, fill = SCAF_ID)) +
theme_minimal() +
geom_density(aes(y = ..scaled.. * 100, weight = R2)) +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
) +
coord_flip() +
facet_grid(variable ~ SCAF_ID) +
theme(legend.position = "none") +
scale_y_continuous(labels = scales::number_format(accuracy = 1)) +
labs(x = "", y = "Density (%)", title = "SVD and FI during Rio Icacos flood")
print(p1)
density_data <- ggplot_build(p1)$data[[1]]
density_data <- density_data[which(density_data$PANEL %in% seq(19,27)), ]
mode_FI_source <- sapply(seq(19,27), function(pn){
df <- density_data[which(density_data$PANEL == pn), ]
10 ** df$x[which.max(df$y)]
})
ind <- which(sapply(mode_FI_source, length) == 0)
mode_FI_source[ind] <- NA
mode_FI_source <- unlist(mode_FI_source)
print("FI modes:")
print(mode_FI_source)
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data_source <- chemical_data_source[, which(colnames(chemical_data_source) %in% keep)]
colnames(clustering_data_source) <- gsub("_pctmass", "", colnames(clustering_data_source))
correlation_data_source <- clustering_data_source
nearZeroVar(clustering_data_source, saveMetrics = TRUE)
clustering_data_source <- transform_data(clustering_data_source, methods = c("nzv"))
correlation_data_source <- clustering_data_source
mat <- as.matrix(correlation_data_source)
colnames(mat) <- colnames(correlation_data_source)
rownames(mat) <- chemical_data_source$SCAF_ID
correlations <- Hmisc::rcorr(mat, type = "pearson")
correlations$r[which(correlations$P > 0.05)] <- 0
# I remove Dickite  vs FI correlation as Dickite is mostly null values
corrplot(correlations$r, type ="upper", method ="number")
correlations <- Hmisc::rcorr(mat, type = "spearman")
correlations$r[which(correlations$P > 0.05)] <- 0
corrplot(correlations$r, type ="upper", method ="number")
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data_source <- chemical_data_source[, which(colnames(chemical_data_source) %in% keep)]
colnames(clustering_data_source) <- gsub("_pctmass", "", colnames(clustering_data_source))
correlation_data_source <- clustering_data_source
nearZeroVar(clustering_data_source, saveMetrics = TRUE)
clustering_data_source <- transform_data(clustering_data_source, methods = c("nzv"))
clustering_data_source$FI <- mode_FI_source
correlation_data_source <- clustering_data_source
mat <- as.matrix(correlation_data_source)
colnames(mat) <- colnames(correlation_data_source)
rownames(mat) <- chemical_data_source$SCAF_ID
mat <- na.omit(mat)
corr_pearson <- geom_segment_corrplot(mat, corr_type = "pearson")
if(!is.na(corr_pearson)) corr_pearson$p
corr_spearman <- geom_segment_corrplot(mat, corr_type = "spearman")
if(!is.na(corr_spearman)) corr_spearman$p
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data_source <- chemical_data_source[, which(colnames(chemical_data_source) %in% keep)]
colnames(clustering_data_source) <- gsub("_pctmass", "", colnames(clustering_data_source))
correlation_data_source <- clustering_data_source
nearZeroVar(clustering_data_source, saveMetrics = TRUE)
clustering_data_source <- transform_data(clustering_data_source, methods = c("nzv"))
correlation_data_source <- clustering_data_source
mat <- as.matrix(correlation_data_source)
colnames(mat) <- colnames(correlation_data_source)
rownames(mat) <- chemical_data_source$SCAF_ID
drops <- c("Discharge", "Rainfall")
clustering_data_source <- clustering_data_source[, !colnames(clustering_data_source) %in% drops]
mat <- as.matrix(clustering_data_source)
mat <- scale(mat)
colnames(mat) <- colnames(clustering_data_source)
rownames(mat) <- chemical_data_source$SCAF_ID
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
print("Clustering Variables")
print(colnames(clustering_data_source))
print("Data matrix dimensions (rows columns):")
print(dim(mat))
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
p_dist <- fviz_dist(distance, gradient = list(low = "steelblue",  high = "white"), order = FALSE)
p_wss <- fviz_nbclust(df, kmeans, method = "wss", k.max = kmax)
p_sil <- fviz_nbclust(df, kmeans, method = "silhouette", k.max = kmax)
gap_stat <- clusGap(df, FUN = kmeans, nstart = 25, K.max = kmax, B = 50)
p_gap <- fviz_gap_stat(gap_stat)
lay <-  rbind(c(1, 2), c(3, 4))
gridExtra::grid.arrange(grobs = list(p_dist, p_wss, p_sil, p_gap), layout_matrix = lay)
stab <- clValid(df, nClust = 2:kmax, clMethods = "kmeans",
validation = "stability")
summary(stab)
print("Optimal Number of Cluster under One Std Rule")
sd_measures <- apply(stab@measures, 1, sd)
min_measures <- apply(stab@measures, 1, min)
one_sd <- t(sapply(seq_along(sd_measures), function(i) min_measures[i] + sd_measures[i] > stab@measures[i, ,]))
optim_df <- data.frame(measure = stab@measNames, cluster = colnames(stab@measures)[apply(one_sd, 1, which.max)])
print(optim_df)
optik <- 4
k2 <- kmeans(df, centers = optik, nstart = 25)
pkm <- fviz_cluster(k2, geom = "text",  data = df) + theme_cowplot()
pkm
p_dist <- fviz_dist(distance, gradient = list(low = "steelblue",  high = "white"), order = FALSE)
p_wss <- fviz_nbclust(df, hcut, method = "wss", k.max = kmax)
p_sil <- fviz_nbclust(df, hcut, method = "silhouette", k.max = kmax)
gap_stat <- clusGap(df, FUN = hcut, nstart = 25, K.max = kmax, B = 50)
p_gap <- fviz_gap_stat(gap_stat)
lay <-  rbind(c(1, 2), c(3, 4))
gridExtra::grid.arrange(grobs = list(p_dist, p_wss, p_sil, p_gap), layout_matrix = lay)
stab <- clValid(df, nClust = 2:kmax, clMethods = "hierarchical",
validation = "stability")
summary(stab)
print("Optimal Number of Cluster under One Std Rule")
sd_measures <- apply(stab@measures, 1, sd)
min_measures <- apply(stab@measures, 1, min)
one_sd <- t(sapply(seq_along(sd_measures), function(i) min_measures[i] + sd_measures[i] > stab@measures[i, ,]))
optim_df <- data.frame(measure = stab@measNames, cluster = colnames(stab@measures)[apply(one_sd, 1, which.max)])
print(optim_df)
optik <- 4
res.hc <- eclust(df, "hclust", k = optik, graph = FALSE)
phc <- fviz_dend(res.hc, rect = TRUE, show_labels = TRUE)
phc
# # Compute clValid
clmethods <- c("hierarchical","kmeans")
stab <- clValid(df, nClust = 2:4, clMethods = clmethods,
validation = "stability")
# Display only optimal Scores
summary(stab)
keep <- names(chemical_data_source)[-1]
clustering_data_all <- chemical_data[, colnames(chemical_data) %in% keep]
clustering_data_all$SCAF_ID <- chemical_data$sample_time
clustering_data_all <- rbind(clustering_data_all, chemical_data_source)
all_ID <- clustering_data_all$SCAF_ID
clustering_data_all <- clustering_data_all[, -ncol(clustering_data_all)]
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
clustering_data_all <- transform_data(clustering_data_all, methods = c("nzv"))
correlation_data_all <- clustering_data_all
correlation_data_all$FI <- c(mode_FI, mode_FI_source)
mat <- as.matrix(clustering_data_all)
mat <- scale(mat)
colnames(mat) <- colnames(clustering_data_all)
rownames(mat) <- all_ID
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
print("Clustering Variables")
print(colnames(clustering_data_all))
print("Data matrix dimensions (rows columns):")
print(dim(mat))
correlation_data_all
correlation_data_all$FI <- c(mode_FI, mode_FI_source)
all_ID
sample_time
chemical_data$SCAF_number
chemical_data$SCAF_number %in% c("5", "6")
which(!chemical_data$SCAF_number %in% c("5", "6"))
correlation_data_all[-which(!chemical_data$SCAF_number %in% c("5", "6")), ]
correlation_data_all$FI <- c(mode_FI, mode_FI_source)
-which(!chemical_data$SCAF_number %in% c("5", "6"))
correlation_data_all <- clustering_data_all
correlation_data_all
dim(correlation_data_all)
length(mode_FI)
length(mode_FI_source)
which(!chemical_data$SCAF_number %in% c("5", "6"))
correlation_data_all <- clustering_data_all
correlation_data_all <- correlation_data_all[-which(!chemical_data$SCAF_number %in% c("5", "6")), ]
correlation_data_all$FI <- c(mode_FI, mode_FI_source)
keep <- names(chemical_data_source)[-1]
clustering_data_all <- chemical_data[, colnames(chemical_data) %in% keep]
clustering_data_all$SCAF_ID <- chemical_data$sample_time
clustering_data_all <- rbind(clustering_data_all, chemical_data_source)
all_ID <- clustering_data_all$SCAF_ID
clustering_data_all <- clustering_data_all[, -ncol(clustering_data_all)]
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
clustering_data_all <- transform_data(clustering_data_all, methods = c("nzv"))
correlation_data_all_FI <- clustering_data_all
correlation_data_all_FI <- correlation_data_all_FI[-which(!chemical_data$SCAF_number %in% c("5", "6")), ]
correlation_data_all_FI$FI <- c(mode_FI, mode_FI_source)
mat <- as.matrix(correlation_data_all_FI)
mat <- scale(mat)
colnames(mat) <- colnames(correlation_data_all_FI)
rownames(mat) <- all_ID
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
print("Clustering Variables")
print(colnames(correlation_data_all_FI))
print("Data matrix dimensions (rows columns):")
print(dim(mat))
corr_pearson <- geom_segment_corrplot(mat, corr_type = "pearson")
if(!is.na(corr_pearson)) corr_pearson$p
corr_spearman <- geom_segment_corrplot(mat, corr_type = "spearman")
if(!is.na(corr_spearman)) corr_spearman$p
mat
keep <- names(chemical_data_source)[-1]
clustering_data_all <- chemical_data[, colnames(chemical_data) %in% keep]
clustering_data_all$SCAF_ID <- chemical_data$sample_time
clustering_data_all <- rbind(clustering_data_all, chemical_data_source)
all_ID <- clustering_data_all$SCAF_ID
clustering_data_all <- clustering_data_all[, -ncol(clustering_data_all)]
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
clustering_data_all <- transform_data(clustering_data_all, methods = c("nzv"))
correlation_data_all_FI <- clustering_data_all
correlation_data_all_FI <- correlation_data_all_FI[-which(!chemical_data$SCAF_number %in% c("5", "6")), ]
correlation_data_all_FI$FI <- c(mode_FI, mode_FI_source)
mat <- as.matrix(correlation_data_all_FI)
mat <- na.omit(mat)
corr_pearson <- geom_segment_corrplot(mat, corr_type = "pearson")
if(!is.na(corr_pearson)) corr_pearson$p
corr_spearman <- geom_segment_corrplot(mat, corr_type = "spearman")
if(!is.na(corr_spearman)) corr_spearman$p
correlations <- Hmisc::rcorr(mat, type = "spearman")
correlations$r[which(correlations$P > 0.05)] <- 0
corrplot(correlations$r, type ="upper", method ="number")
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data_source <- chemical_data_source[, which(colnames(chemical_data_source) %in% keep)]
colnames(clustering_data_source) <- gsub("_pctmass", "", colnames(clustering_data_source))
correlation_data_source <- clustering_data_source
nearZeroVar(clustering_data_source, saveMetrics = TRUE)
clustering_data_source <- transform_data(clustering_data_source, methods = c("nzv"), uniqueCut = 30, freqCut = 3))
clustering_data_source$FI <- mode_FI_source
correlation_data_source <- clustering_data_source
mat <- as.matrix(correlation_data_source)
colnames(mat) <- colnames(correlation_data_source)
rownames(mat) <- chemical_data_source$SCAF_ID
mat <- na.omit(mat)
keep <- c("Quartz", "Halloysite", "Kaolinite", "Goethite", "Andesine", "Magnetite", "Dickite", "Nitrogen_pctmass", "Carbon_pctmass", "Discharge", "Rainfall")
clustering_data_source <- chemical_data_source[, which(colnames(chemical_data_source) %in% keep)]
colnames(clustering_data_source) <- gsub("_pctmass", "", colnames(clustering_data_source))
correlation_data_source <- clustering_data_source
nearZeroVar(clustering_data_source, saveMetrics = TRUE)
clustering_data_source <- transform_data(clustering_data_source, methods = c("nzv"), uniqueCut = 30, freqCut = 3)
clustering_data_source$FI <- mode_FI_source
correlation_data_source <- clustering_data_source
keep <- names(chemical_data_source)[-1]
clustering_data_all <- chemical_data[, colnames(chemical_data) %in% keep]
clustering_data_all$SCAF_ID <- chemical_data$sample_time
clustering_data_all <- rbind(clustering_data_all, chemical_data_source)
all_ID <- clustering_data_all$SCAF_ID
clustering_data_all <- clustering_data_all[, -ncol(clustering_data_all)]
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
clustering_data_all <- transform_data(clustering_data_all, methods = c("nzv"),freqCut = 4, uniqueCut = 40)
correlation_data_all <- clustering_data_all
mat <- as.matrix(clustering_data_all)
mat <- scale(mat)
colnames(mat) <- colnames(clustering_data_all)
rownames(mat) <- all_ID
df <- mat
distance <- get_dist(mat)
set.seed(1789)
kmax <- nrow(df) %/% 2
print("Clustering Variables")
print(colnames(clustering_data_all))
print("Data matrix dimensions (rows columns):")
print(dim(mat))
keep <- names(chemical_data_source)[-1]
clustering_data_all <- chemical_data[, colnames(chemical_data) %in% keep]
clustering_data_all$SCAF_ID <- chemical_data$sample_time
clustering_data_all <- rbind(clustering_data_all, chemical_data_source)
all_ID <- clustering_data_all$SCAF_ID
clustering_data_all <- clustering_data_all[, -ncol(clustering_data_all)]
nearZeroVar(clustering_data_all, saveMetrics = TRUE)
clustering_data_all <- transform_data(clustering_data_all, methods = c("nzv"),freqCut = 4, uniqueCut = 40)
correlation_data_all_FI <- clustering_data_all
correlation_data_all_FI <- correlation_data_all_FI[-which(!chemical_data$SCAF_number %in% c("5", "6")), ]
correlation_data_all_FI$FI <- c(mode_FI, mode_FI_source)
mat <- as.matrix(correlation_data_all_FI)
mat <- na.omit(mat)
mat
corr_pearson <- geom_segment_corrplot(mat, corr_type = "pearson")
if(!is.na(corr_pearson)) corr_pearson$p
corr_spearman <- geom_segment_corrplot(mat, corr_type = "spearman")
if(!is.na(corr_spearman)) corr_spearman$p
