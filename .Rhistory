p
make_stacked_density_plot <- function(i, ttl, limx = c(0, 1), logscale = FALSE){
l.df <- lapply(seq_along(hb.scales), function(ind_H){
df <- data.frame(values = getValues(llH[[ind_H]][[i]]))
p <- ggplot(df, aes(x = values)) +
geom_density(aes(y = ..scaled..))
if (logscale){
p <- p + scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x)),
limits = limx
)
}
p_df <- ggplot_build(p)$data[[1]]
df <- data.frame(x = p_df$x, y = p_df$y)
df$scale <- rep(hb.scales[ind_H], nrow(df))
return(df)
})
df <- do.call(rbind, l.df)
p <- ggplot(df, aes(x = x, y = y, group = scale, colour = scale)) +
geom_line() +
scale_color_viridis(begin = 0.1, end = 0.9, direction = -1) +
theme_cowplot() +
labs(x = "values", y = "density", title = ttl)
return(p)
}
make_stacked_density_plot(i = 2, "Median Peclet Number", limx = c(10^0, 10^6), logscale = TRUE)
p_Pe_median <- make_stacked_density_plot(i = 2, "Median Peclet Number", limx = c(10^0, 10^6), logscale = TRUE)
p_Pe_mean <- make_stacked_density_plot(i = 3, "Mean Peclet Number", limx = c(10^0, 10^6), logscale = TRUE)
p_Pe_max <- make_stacked_density_plot(i = 4, "Maximum Peclet Number", limx = c(10^0, 10^7), logscale = TRUE)
p_Pe_std <- make_stacked_density_plot(i = 5, "Standard Deviation of Peclet Number", limx = c(10^0, 10^6), logscale = TRUE)
lay <-  rbind(c(1, 2), c(3, 4))
gridExtra::grid.arrange(grobs = list(p_Pe_median, p_Pe_mean, p_Pe_max, p_Pe_std), layout_matrix = lay)
p_par1 <- make_stacked_density_plot(i = 25, "Parallel Exponent 1")
p_perp1 <- make_stacked_density_plot(i = 26, "Perpendicular Exponent 1")
p_xi1 <- make_stacked_density_plot(i = 27, "Anisotropy Exponent 1")
p_par2 <- make_stacked_density_plot(i = 28, "Parallel Exponent 2")
p_perp2 <- make_stacked_density_plot(i = 29, "Perpendicular Exponent 2")
p_xi2 <- make_stacked_density_plot(i = 30, "Anisotropy Exponent 2")
lay <-  rbind(c(1, 2, 3), c(4, 5, 6))
gridExtra::grid.arrange(grobs = list(p_par1, p_perp1, p_xi1, p_par2, p_perp2, p_xi2), layout_matrix = lay)
gridExtra::grid.arrange(grobs = list(p_par1, p_perp1, p_xi1, p_par2, p_perp2, p_xi2), layout_matrix = lay)
gridExtra::grid.arrange(grobs = list(p_par1, p_perp1, p_xi1, p_par2, p_perp2, p_xi2), layout_matrix = lay)p_xv_HHCF <- make_stacked_density_plot(i = 15, "Cross-over Scale from HHCF", limx = c(10^0, 10^6), logscale = TRUE)
p_xv_DFT <- make_stacked_density_plot(i = 22, "Cross-over Scale from DFT", limx = c(10^0, 10^6), logscale = TRUE)
gridExtra::grid.arrange(grobs = list(p_xv_HHCF, p_xv_DFT ))
p_xv_HHCF <- make_stacked_density_plot(i = 15, "Cross-over Scale from HHCF", limx = c(10^0, 10^6), logscale = TRUE)
p_xv_DFT <- make_stacked_density_plot(i = 22, "Cross-over Scale from DFT", limx = c(10^0, 10^6), logscale = TRUE)
gridExtra::grid.arrange(grobs = list(p_xv_HHCF, p_xv_DFT))
make_stacked_density_plot(i = 1, "Hurst Coefficient")
names(llH[[1]])
p_beta1 <- make_stacked_density_plot(i = 17, "Spectral Slope 1", limx = c(NA, NA), logscale = FALSE)
p_beta2 <- make_stacked_density_plot(i = 18, "Spectral Slope 2", limx = c(NA, NA), logscale = FALSE)
gridExtra::grid.arrange(grobs = list(p_beta1, p_beta2))
p_beta1 <- make_stacked_density_plot(i = 17, "Spectral Slope 1", limx = c(-5, 5), logscale = FALSE)
p_beta2 <- make_stacked_density_plot(i = 18, "Spectral Slope 2", limx = c(-5, 5), logscale = FALSE)
gridExtra::grid.arrange(grobs = list(p_beta1, p_beta2))
p_beta1 <- make_stacked_density_plot(i = 17, "Spectral Slope 1", limx = c(-5, 5), logscale = FALSE) + xlim(-5, 5)
p_beta2 <- make_stacked_density_plot(i = 18, "Spectral Slope 2", limx = c(-5, 5), logscale = FALSE) + xlim(-5, 5)
gridExtra::grid.arrange(grobs = list(p_beta1, p_beta2))
p_beta1 <- make_stacked_density_plot(i = 17, "Spectral Slope 1", limx = c(-5, 5), logscale = FALSE) + xlim(-10, 10)
p_beta2 <- make_stacked_density_plot(i = 18, "Spectral Slope 2", limx = c(-5, 5), logscale = FALSE) + xlim(-10, 10)
gridExtra::grid.arrange(grobs = list(p_beta1, p_beta2))
p_beta1 <- make_stacked_density_plot(i = 17, "Spectral Slope 1", limx = c(-5, 5), logscale = FALSE) + xlim(-10, 0)
p_beta2 <- make_stacked_density_plot(i = 18, "Spectral Slope 2", limx = c(-5, 5), logscale = FALSE) + xlim(-10, 0)
gridExtra::grid.arrange(grobs = list(p_beta1, p_beta2))
#####################
##### LIBRARIES #####
#####################
library("shiny")
library("shinydashboard")
library("flexdashboard")
library("sf")
library("ggplot2")
library("gridExtra")
library("raster")
library("sp")
library("tmap")
library("leaflet")
library("oce")
library("somebm")
library("scales")
library("reshape2")
library("spectral")
library("cowplot")
library("viridis")
#################
##### UTILS #####
#################
bin <- function(x, y, nbin){
sorted <- pracma::sortrows(cbind(c(x), c(y)), 1)
x <- sorted[, 1]
y <- sorted[, 2]
xmin <- head(x ,1)
xmax <- tail(x, 1)
xrange <- xmax - xmin
w <- xrange / nbin
s <- pracma::zeros(nbin, 8)
for (i in (1:nbin)){
xlo <- xmin + (i-1) * w
xhi <- xlo + w
x.window <- which((x >= xlo) & (x <= xhi))
if (length(x.window) > 1){
mini <- min(x.window)
maxi <- max(x.window)
s[i, ] <- c(mean(xlo, xhi),
mean(y[mini:maxi]),
sd(y[mini:maxi]),
sd(y[mini:maxi])/sqrt(maxi-mini+1),
maxi-mini+1,
max(y[mini:maxi]),
min(y[mini:maxi]),
median(y[mini:maxi])
)
} else {
s[i, ] <- c(mean(xlo, xhi), NA, NA, NA, NA, NA, NA, NA)
}
}
return(s)
}
get_range <- function(attribute = "median", logscale = FALSE){
data_range <- sapply(seq_along(hb.scales), function(i) cellStats(llH[[i]][[attribute]], stat = "range", na.rm = TRUE))
print(t(data_range))
data_range <- c(min(data_range[1, is.finite(data_range[1, ])]), max(data_range[2, is.finite(data_range[2, ])]))
if (logscale){
data_range <- log10(data_range)
if (data_range[1] == "-Inf") data_range[1] <- 0
}
return(data_range)
}
get_H_Peclet_zeta_raster <- function(out.dir = "data"){
lf <- list.files(path = file.path(out.dir), pattern = ".grd")
hb.scales <- unlist(lapply(lf, function(f) tools::file_path_sans_ext(f)))
hb.scales <- gsub("H_Peclet_zeta_", "", hb.scales)
hb.scales <- unname(sapply(hb.scales, as.numeric))
lf <- lf[order(hb.scales)]
hb.scales <- hb.scales[order(hb.scales)]
llH <- lapply(lf, function(f) raster::stack(file.path(out.dir,f)))
return(list(llH = llH, hb.scales = hb.scales))
}
l <- get_H_Peclet_zeta_raster(out.dir = "data")
llH <- l$llH
hb.scales <- l$hb.scales
N <- 1E4
n.boot <- 20
# shp.USA.dir <- "data/california-rivers/geomorph_input_data_(Elaheh-White)/USA_Boundary"
# shp.USA <- shapefile(file.path(root.dir, shp.USA.dir, "cb_2015_us_nation_5m.shp"))
# shp.CA.dir <- "data/california_rivers/geomorph_input_data_(Elaheh-White)/DWR_CA_Boundary"
# shp.CA <- shapefile(file.path(root.dir, shp.CA.dir, "California_Boundary_TA.shp"))
# shp.USA <- spTransform(shp.USA, crs(llH[[1]]))
# shp.CA <- spTransform(shp.CA, crs(llH[[1]]))
# mllH <- lapply(llH, function(r){mask(r, shp.CA)})
make_stacked_density_plot <- function(i, ttl, limx = c(0, 1), logscale = FALSE){
l.df <- lapply(seq_along(hb.scales), function(ind_H){
df <- data.frame(values = getValues(llH[[ind_H]][[i]]))
p <- ggplot(df, aes(x = values)) +
geom_density(aes(y = ..scaled..))
if (logscale){
p <- p + scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x)),
limits = limx
)
}
p_df <- ggplot_build(p)$data[[1]]
df <- data.frame(x = p_df$x, y = p_df$y)
df$scale <- rep(hb.scales[ind_H], nrow(df))
return(df)
})
df <- do.call(rbind, l.df)
p <- ggplot(df, aes(x = x, y = y, group = scale, colour = scale)) +
geom_line() +
scale_color_viridis(begin = 0.1, end = 0.9, direction = -1) +
theme_cowplot() +
labs(x = "values", y = "density", title = ttl)
return(p)
}
make_hist_plot <- function(df, i, ttl, limx = c(0, 1), logscale = FALSE){
ind_H <- which(hb.scales == as.numeric(input$scale_zeta))
df <- data.frame(values = getValues(llH[[ind_H]][[i]]))
p <- ggplot(df, aes(x = values)) +
geom_density(aes(y = ..scaled..)) +
theme_cowplot() +
labs(title = ttl) +
ylim(0, 1) +
xlim(limx)
if (logscale){
p <- p + scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x)),
limits = limx
)
}
return(p)
}
p_par1 <- make_stacked_density_plot(i = 25, "Parallel Exponent 1")
p_perp1 <- make_stacked_density_plot(i = 26, "Perpendicular Exponent 1")
p_zeta1 <- make_stacked_density_plot(i = 27, "Anisotropy Exponent 1")
p_par2 <- make_stacked_density_plot(i = 28, "Parallel Exponent 2")
p_perp2 <- make_stacked_density_plot(i = 29, "Perpendicular Exponent 2")
p_zeta2 <- make_stacked_density_plot(i = 30, "Anisotropy Exponent 2")
lay <-  rbind(c(1, 2, 3), c(4, 5, 6))
gridExtra::grid.arrange(grobs = list(p_par1, p_perp1, p_zeta1, p_par2, p_perp2, p_zeta2), layout_matrix = lay)
p_zeta1
p_zeta1 + xlim(0, 5)
p_zeta1 + xlim(1, 5)
load("data/melted.rda")
keeps <- c("median", "mean", "max", "sd", "zeta.1")
melted <- melted[which(melted$variable %in% keeps), ]
p1 <- ggplot(melted, aes(x = scales, y = variable, fill = value)) +
geom_tile(color = "white") +
theme_minimal() +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
)+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
# geom_text(aes(label = strvalue), color = "white", cex = 2) +
scale_fill_distiller(palette = "RdBu", limits = c(-1, 1))
print(p1)
p1
p2 <- ggplot(melted, aes(x = scales, y = value)) +
geom_point(alpha = 1) +
theme_minimal() +
scale_x_log10(
breaks = trans_breaks(n=3, 'log10', function(x) 10^x),
labels = trans_format('log10', math_format(10^.x))
) +
stat_smooth(fill=NA, alpha=.5) +
guides(colour=FALSE) +
stat_smooth(lwd=1, colour='black', alpha=.5) +
facet_wrap(variable ~ .)
print(p2)
p2
p2 + cowplot
p2 + cowplot::theme_cowplot()
10**-0.5
p_zeta1
p_zeta1 + xlim(1, 2)
0.78 / 0.67
1 / exp(1)
library(forcats)
library(dplyr)
library(cowplot)
if_data <- read.csv(file.path("data", "journal_impact_factor.csv"))
View(if_data)
if_data <- read.csv(file.path("data", "journal_impact_factor.csv"))
View(if_data)
df <- if_data
df <- df[order(-df$Impact.Factor), ]
p <-    ggplot(head(df, 20)) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "RF model importance (top 20 variables)", y = "variable", x = "variable importance") +
theme_minimal()
df <- if_data
df <- df[order(-df$Impact.Factor), ]
p <-    ggplot(df) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "2017 Impact Factor", y = "Journal", x = "Impact Factor") +
theme_cowplot()
p
df <- if_data
df <- df[order(df$Impact.Factor), ]
p <-    ggplot(df) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "2017 Impact Factor", y = "Journal", x = "Impact Factor") +
theme_cowplot()
p
df <- if_data
df <- df[order(df$Impact.Factor), ]
p <-    ggplot(df) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "2017 Impact Factor", y = "Journal", x = "Impact Factor") +
theme_cowplot()
p
names(names())
df
names(df)
df <- if_data
df <- df[order(-df$Impact.Factor), ]
p <-    ggplot(df) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "2017 Impact Factor", y = "Journal", x = "Impact Factor") +
theme_cowplot()
p
library(forcats)
library(dplyr)
library(cowplot)
if_data <- read.csv(file.path("data", "journal_impact_factor.csv"))
df <- if_data
df <- df[order(-df$Impact.Factor), ]
p <-    ggplot(df) +
geom_point(aes(x=Impact.Factor, y=fct_reorder(Journal,Impact.Factor))) +
geom_segment(aes(x = 0, xend = Impact.Factor, y = fct_reorder(Journal,Impact.Factor), yend = fct_reorder(Journal,Impact.Factor))) +
labs(title = "2017 Impact Factor", y = "Journal", x = "Impact Factor") +
theme_cowplot()
p
p
a <- c(0,10,1,0,0,1,1,0)
dim(a) = c(3,3)
a <- matrix(a)
a
a <- c(0,1,0,1,0,0,1,1,0)
dim(a) = c(3,3)
a
tra <- a
a <-t(a)
a
tr(a)
a <- t(a)
a %*% tra
tra
a
tra
tra
a == tra
a <- matrix(c(0,1,0,1,0,0,1,1,0), byrows = TRUE)
a <- matrix(c(0,1,0,1,0,0,1,1,0), by.rows = TRUE)
?base::matrix
a <- matrix(c(0,1,0,1,0,0,1,1,0), byrow = TRUE)
a
a <- matrix(c(0,1,0,1,0,0,1,1,0), byrow = TRUE, nrow = 3)
a
a %*% t(a)
diag(a) = 0
a
c = a %*% t(a)
c
diag(c) = 0
c
setwd("/media/hguillon/hrvg/research/exploitation/R/latin_america")
# loading citation network
citation_network <- readRDS("citingDf.Rds")
source_ids <- readRDS("source_ids.Rds")
# load paper id
in_corpus_file <- "in_corpus.Rds"
in_corpus <- readRDS(in_corpus_file)
EndNoteIdcorpus <- unname(sapply(in_corpus$pdfs, substr, start = 1, stop = 10))
titleDocs <- readLines("/media/hguillon/hrvg/research/data/latin_america/water-management/topic-model/data/info.dat")
EndNoteIdLDA <- unname(sapply(titleDocs, substr, start = 1, stop = 10))
in_corpus_LDA <- in_corpus[which(EndNoteIdcorpus %in% EndNoteIdLDA), ]
EndNoteIdcorpus_LDA <- EndNoteIdcorpus[which(EndNoteIdcorpus %in% EndNoteIdLDA)]
source_ids_LDA <- source_ids[which(EndNoteIdcorpus %in% EndNoteIdLDA)]
# loading consolidated results
missing <- which(! EndNoteIdLDA %in% EndNoteIdcorpus)
consolidated_results <- readRDS("consolidated_results.Rds")
consolidated_results$ID <- EndNoteIdLDA[-missing]
consolidated_results$source_ids <- source_ids_LDA
consolidated_network <- consolidated_results[which(consolidated_results$country != "Irrelevant"), ]
consolidated_network <- consolidated_network[which(consolidated_network$source_ids %in% citation_network$citing), ]
relevant_network <- citation_network[citation_network$citing %in% consolidated_network$source_ids, ]
relevant_network <- relevant_network[relevant_network$cited %in% consolidated_network$source_ids, ]
relevant_network$citing_country <- consolidated_network$country[match(relevant_network$citing, consolidated_network$source_ids)]
relevant_network$cited_country <- consolidated_network$country[match(relevant_network$cited, consolidated_network$source_ids)]
relevant_network <- relevant_network[relevant_network$cited_country %in% relevant_network$citing_country, ]
relevant_network$citing_country <- as.factor(as.character(relevant_network$citing_country))
relevant_network$cited_country <- factor(as.character(relevant_network$cited_country), levels = levels(relevant_network$citing_country))
counts <- lapply(levels(relevant_network$citing_country), function(c){
df <- relevant_network[relevant_network$citing_country == c, ]
return(table(df$cited_country))
})
counts <- do.call(rbind, counts)
rownames(counts) <- levels(relevant_network$citing_country)
dim(counts)
head(relevant_network)
counts
counts <- lapply(levels(relevant_network$citing_country), function(c){
df <- relevant_network[relevant_network$citing_country == c, ]
return(table(df$cited_country))
})
counts <- do.call(cbind, counts)
counts2 <- counts
counts <- lapply(levels(relevant_network$cited_country), function(c){
df <- relevant_network[relevant_network$cited_country == c, ]
return(table(df$citing_country))
})
counts <- do.call(rbind, counts)
counts == counts2
edgelist_to_adjmat(relevant_network[, 3:4])
netdiffuseR::edgelist_to_adjmat(relevant_network[, 3:4])
library(igraph)
as.matrix(get.adjacency(graph.data.frame(relevant_network[, 3:4])))
library(igraph)
df <- as.matrix(get.adjacency(graph.data.frame(relevant_network[, 3:4])))
df[order(rownames(df)), order(rownames(df))]
df == count
df == counts
df
library(igraph)
df <- as.matrix(get.adjacency(graph.data.frame(relevant_network[, 3:4])))
df[order(rownames(df)), ]
df <- df[order(rownames(df)), ]
df <- df[, order(colnames(df))]
df
df == counts
df == counts2
df
head(df)
head(counts)
head(relevant_network)
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
plot(g)
relations
colnames(relations) <- c("a", "b", 'age', "gender")
actors <- data.frame(name=c("Alice", "Bob", "Cecil", "David",
"Esmeralda"),
age=c(48,33,45,34,21),
gender=c("F","M","F","M","F"))
relations <- data.frame(from=c("Bob", "Cecil", "Cecil", "David",
"David", "Esmeralda"),
to=c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
same.dept=c(FALSE,FALSE,TRUE,FALSE,FALSE,TRUE),
friendship=c(4,5,5,2,1,1), advice=c(4,5,5,4,2,3))
g <- graph_from_data_frame(relations, directed=TRUE, vertices=actors)
print(g, e=TRUE, v=TRUE)
colnames(relations) <- c("a", "b", 'age', "gender")
g <- graph_from_data_frame(relations)
relations
relations <- relations[, 1:2]
relatons
relations
g <- graph_from_data_frame(relations)
plto(g)
plot(g)
library(igraph)
g <- graph.data.frame(relevant_network[, 3:4])
plot(g)
library(igraph)
get.adjacency(g)
library(igraph)
as.matrix(get.adjacency(g))
library(igraph)
as.matrix(get.adjacency(g))[1, ]
counts["Colombia", ]
counts
relations
g <- graph_from_data_frame(relations)
g
library(igraph)
as.matrix(get.adjacency(g))
plot(g)
summary(g)
g <- graph_from_data_frame(relevant_network[, 3:4])
counts <- as.matrix(get.adjacency(g))
counts
g <- graph_from_data_frame(relevant_network[, 3:4])
counts <- as.matrix(get.adjacency(g))
counts <- counts[, order(colnames(counts))]
counts <- counts[order(rownames(counts)), ]
counts
g <- graph_from_data_frame(relevant_network[, 3:4])
adj <- as.matrix(get.adjacency(g))
head(relevant_network)
dim(adm)
dim(adj)
g <- graph_from_data_frame(relevant_network[, 3:4])
adj <- as.matrix(get.adjacency(g))
dim(adj)
g <- graph_from_data_frame(relevant_network[, 1:2])
adj <- as.matrix(get.adjacency(g))
dim(adj)
colnames(adj)
topicNetwork <- consolidated_network[which(consolidated_network$source_ids %in% colnames(adj)), ]
topicNetwork <- topicNetwork[match(colnames(adj), topicNetwork$source_ids), ]
docTopics <- topicNetwork[, seq(62)]
all(rownames(docTopics) == rownames(adj))
# df <- as.matrix(get.adjacency(graph.data.frame(relevant_network[, 3:4])))
g <- graph_from_data_frame(relevant_network[, 1:2])
adj <- as.matrix(get.adjacency(g))
topicNetwork <- consolidated_network[which(consolidated_network$source_ids %in% colnames(adj)), ]
topicNetwork <- topicNetwork[match(colnames(adj), topicNetwork$source_ids), ]
docTopics <- topicNetwork[, seq(62)]
all(rownames(docTopics) == rownames(adj))
table(rownames(docTopics) == rownames(adj))
all(topicNetwork$source_ids == rownames(adj))
adj
adj
summary(adj)
library("mlr")
library("circlize")
# matrix multiplication
consolidated_results <- readRDS("consolidated_results.Rds")
consolidated_results <- consolidated_results[which(consolidated_results$country != "Irrelevant"), ]
docTopics <- consolidated_results[, seq(62)]
country <- consolidated_results$country
country <- as.character(country[country != "Irrelevant"])
df_country <- createDummyFeatures(country)
network_results <- t(as.matrix(df_country)) %*% as.matrix(docTopics)
dimnames(network_results) <- list(orig = rownames(network_results), dest = colnames(network_results))
countryTopics <- rowSums(network_results)
topicsCountry <- colSums(network_results)
g <- make_bipartite_graph( c(0,1,0,1,0,0), c(1,2,2,3,3,4) )
g
plot(g)
as_incidence_matrix(g)
g <- make_bipartite_graph( rep(0:1,length=10), c(1:10))
print(g, v=TRUE)
plot(g)
