ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
# other
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value))
View(df)
View(sums)
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd) # work through function
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# define subset
probs <- reduce_docs_for_JSd(budget)
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd) # work through function
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
View(df)
# attempt 2
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup()
View(df)
ggplot(subset(df, country == "Colombia")) +
geom_point(aes(x = value, y = value2))
ggplot(subset(df, country == "Colombia")) +
geom_densityt(aes(x = value))
ggplot(subset(df, country == "Colombia")) +
geom_density(aes(x = value))
ggplot(subset(df, country == "Colombia")) +
geom_density(aes(x = value)) +
geom_density(aes(x = value2, fill = red))
ggplot(subset(df, country == "Colombia")) +
geom_density(aes(x = value)) +
geom_density(aes(x = value2, fill = "red"))
ggplot(subset(df, country == "Colombia")) +
# geom_density(aes(x = value)) +
geom_density(aes(x = value2, fill = "red"))
ggplot() +
geom_density(subset(df, country =="Colombia"), aes(x = value), fill = 'Colombia') +
geom_density(subset(df, country =="Brazil"), aes(x = value), fill = 'Brazil')
ggplot() +
geom_density(subset(df, country =="Colombia"), aes(x = value, fill = 'Colombia')) +
geom_density(subset(df, country =="Brazil"), aes(x = value, fill = 'Brazil'))
ggplot() +
geom_density(subset(df, country =="Colombia"), aes(x = value, fill = 'Colombia'))
Colombia <- subset(df, country =='Colombia')
Brazil <- subset(df, country =='Brazil')
ggplot() +
geom_density(Colombia, aes(x = value, fill = 'Colombia'))
ggplot(Colombia,) +
geom_density(aes(x = value, fill = 'Colombia'))
ggplot(Colombia) +
geom_density(aes(x = value, fill = 'Colombia'))
ggplot(Brazil) +
geom_density(aes(x = value, fill = 'Brazil'))
ggplot(Brazil) +
geom_density(aes(x = value2, fill = 'Brazil'))
ggplot(Colombia) +
geom_density(aes(x = value2, fill = 'Colombia'))
setwd("~/R_code/LAC")
source("./diversity/lib_lac.R")
################### libraries #########################
library(dplyr)
library(vegan)
library(broom)
library(reshape2)
library(ggpubr)
library(data.table)
library(wesanderson)
library(ggplot2)
library(philentropy)
library(scales)
library(ggplotify)
library(plotly)
################### files #########################
general <- readRDS("./consolidated_results_NSF_general.Rds")
specific <- readRDS("./consolidated_results_NSF_specific.Rds") # 45 themes
methods <- readRDS("./consolidated_results_methods.Rds")
budget <- readRDS("./consolidated_results_water budget.Rds")
theme <- readRDS("./consolidated_results_theme.Rds")
# define subset
probs <- reduce_docs_for_JSd(budget)
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(budget)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
# attempt 1 - WORKS
# df <- probs %>%
#   remove_country() %>%
#   group_by(topic) %>%
#   mutate(scaled= scale(value)) %>%
#   ungroup() %>%
#   select(c("topic","scaled"))
#
# topic_distance <- sapply(unique(df$topic), get_JSd)
# names(topic_distance) <- unique(df$topic)
# attempt 2
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(methods)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
# attempt 1 - WORKS
# df <- probs %>%
#   remove_country() %>%
#   group_by(topic) %>%
#   mutate(scaled= scale(value)) %>%
#   ungroup() %>%
#   select(c("topic","scaled"))
#
# topic_distance <- sapply(unique(df$topic), get_JSd)
# names(topic_distance) <- unique(df$topic)
# attempt 2
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(specific)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
# attempt 1 - WORKS
# df <- probs %>%
#   remove_country() %>%
#   group_by(topic) %>%
#   mutate(scaled= scale(value)) %>%
#   ungroup() %>%
#   select(c("topic","scaled"))
#
# topic_distance <- sapply(unique(df$topic), get_JSd)
# names(topic_distance) <- unique(df$topic)
# attempt 2
df <- probs %>%
group_by(country) %>%
mutate(value2 = value/sum(value)) %>%
mutate(scaled= scale(value2)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, x= "country_distance", y = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
View(sums)
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(budget)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
# attempt 1 - WORKS
# df <- probs %>%
#   remove_country() %>%
#   group_by(topic) %>%
#   mutate(scaled= scale(value)) %>%
#   ungroup() %>%
#   select(c("topic","scaled"))
#
# topic_distance <- sapply(unique(df$topic), get_JSd)
# names(topic_distance) <- unique(df$topic)
# attempt 2 - ACCOUNTS FOR CONTRIBUTIONS FROM EACH COUNTRY
df <- probs %>%
group_by(country) %>%
mutate(prop = value/sum(value)) %>% # uses proportion
mutate(scaled= scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, y= "country_distance", x = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# interactive graphs
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(methods)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
df <- probs %>%
group_by(country) %>%
mutate(prop = value/sum(value)) %>% # added proportion to account for influence of country
mutate(scaled= scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, y= "country_distance", x = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# interactive graphs
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(specific)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
df <- probs %>%
group_by(country) %>%
mutate(prop = value/sum(value)) %>% # added proportion to account for influence of country
mutate(scaled= scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, y= "country_distance", x = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# interactive graphs
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
################### pseudocode #########################
# start with 1 topic
# calculate distance from normal distribution for 2 data frames
## 1 - % of research devoted to each topic within a country
## 2- probability of a topic in each document
# subset main df to countries with > 30 papers
# rescale value
# graph density distribution of corpus data + a normal distribution
# extract info both graphs - compare "y"s
# calculate distance - sqrt of JSD
################### code #########################
# define subset
probs <- reduce_docs_for_JSd(general)
# x axis
# calculate distance from normal for %  of research done in each country
sums <-aggregate(probs$value, by=list(probs$country,probs$topic), FUN=sum) # re - summarize after removing countries w/ < 30 papers
names(sums) = c("country","topic","sum")
df <- sums %>%
group_by(country) %>%
mutate(prop = sum/sum(sum)) %>%
group_by(topic) %>%
mutate(scaled = scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
country_distance<- sapply(unique(df$topic), get_JSd)
names(country_distance) <- unique(df$topic)
# get_JSd('rivers', plot = T)
# y axis
# calculate distance from normal for all documents
df <- probs %>%
group_by(country) %>%
mutate(prop = value/sum(value)) %>% # added proportion to account for influence of country
mutate(scaled= scale(prop)) %>%
ungroup() %>%
select(c("topic","scaled"))
topic_distance <- sapply(unique(df$topic), get_JSd)
names(topic_distance) <- unique(df$topic)
################### graph #########################
country_distance <- as.data.frame(country_distance)
topic_distance <- as.data.frame(topic_distance)
distance <- cbind(country_distance, topic_distance)
distance$topic <- rownames(distance)
ggscatter(distance, y= "country_distance", x = "topic_distance",
label = "topic",
label.rectangle = TRUE,
repel = TRUE)
# interactive graphs
# a <- ggplot(distance, aes(x = country_distance, y = topic_distance, group = topic)) + geom_point() + theme_pubr()
# ggplotly(a, tooltip = c('topic'))
