gene2 <- html_nodes(gene, "a.constant")
gene2
gene2 <- html_nodes(gene[1], "a.constant")
gene2
gene2 <- html_text(html_nodes(gene[1], "a.constant"))
gene2
ncbi_url <- "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&amp;cmd=Retrieve&amp;dopt=Graphics&amp;list_uids="
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_nodes(ncbi_webpage, "h1#gene-name")
gen2
gene2
html_nodes(ncbi_webpage, "h1#gene-name.span")
html_nodes(ncbi_webpage, "h1#gene-name.gn.span")
html_nodes(ncbi_webpage, "h1#gene-name.gn")
html_nodes(ncbi_webpage, "h1#gene-name")
html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), "gn")
html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn")
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
gene2 <- "100151976"
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
url <- "https://uswest.ensembl.org/Sus_scrofa/Gene/Summary?db=core;g=ENSSSCG00000022101;r=12:19787858-19853505"
webpage <- read_html(url)
gene <- html_nodes(webpage, "div.twocol div.row div.rhs")
gene2 <- html_nodes(gene, "a.constant")
ncbi_url <- "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&amp;cmd=Retrieve&amp;dopt=Graphics&amp;list_uids="
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
library("rvest")
url <- "https://uswest.ensembl.org/Sus_scrofa/Gene/Summary?db=core;g=ENSSSCG00000022101;r=12:19787858-19853505"
webpage <- read_html(url)
gene <- html_nodes(webpage, "div.twocol div.row div.rhs")
gene2 <- html_nodes(gene, "a.constant")
ncbi_url <- "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&amp;cmd=Retrieve&amp;dopt=Graphics&amp;list_uids="
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
ncbi_webpage
html_nodes(ncbi_webpage, "h1#gene-name")
gene2
url <- "https://uswest.ensembl.org/Sus_scrofa/Gene/Summary?db=core;g=ENSSSCG00000022101;r=12:19787858-19853505"
webpage <- read_html(url)
gene <- html_nodes(webpage, "div.twocol div.row div.rhs")
gene2 <- html_text(html_nodes(gene, "a.constant"))
ncbi_url <- "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&amp;cmd=Retrieve&amp;dopt=Graphics&amp;list_uids="
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
gene2
url <- "https://uswest.ensembl.org/Sus_scrofa/Gene/Summary?db=core;g=ENSSSCG00000022101;r=12:19787858-19853505"
webpage <- read_html(url)
gene <- html_nodes(webpage, "div.twocol div.row div.rhs")
gene2 <- html_text(html_nodes(gene[1], "a.constant"))
ncbi_url <- "http://www.ncbi.nlm.nih.gov/entrez/query.fcgi?db=gene&amp;cmd=Retrieve&amp;dopt=Graphics&amp;list_uids="
ncbi_webpage <- read_html(paste0(ncbi_url, gene2))
html_text(html_nodes(html_nodes(ncbi_webpage, "h1#gene-name"), ".gn"))
x <- seq(8)
x
y <- c(8, 15, 33, 63, 112, 144, 103, 207)
plot(x, y)
log(1)
plot(x, y, log = "xy")
plot(x, y, log = "y")
plot(x, y, log = "xy")
linearmodel <- lm(log(y) ~ log(x))
linearmodel$coefficients
predict(linearmodel, log(2))
predict(linearmodel)
predict(linearmodel, newdata = log(9))
predict(linearmodel, newdata = data.frame(x = log(9)))
log(e)
log(exp(1))
linearmodel$coefficients[1]
exp(linearmodel$coefficients[1])
exp(linearmodel$coefficients[1]) * 2^linearmodel$coefficients[2]
exp(linearmodel$coefficients[1]) * 2^linearmodel$coefficients[9]
exp(linearmodel$coefficients[1]) * 9^linearmodel$coefficients[2]
plot(x, y, log = "xy", xlab = "Emails", ylab = "Time lag between emails")
plot(x, y,, xlab = "Emails", ylab = "Time lag between emails")
install.packages("sf")
library(sp)
install.packages("sf")
install.packages("sf")
install.packages("sf")
install.packages("sf")
library("sf")
install_github('andreacirilloac/updateR')
setwd("/mnt/2A80DBB180DB81AD/research/exploitation/R/latin_america")
install.packages("flexdashboard")
libraries <- c(
"circlize",
"cowplot",
"factoextra",
"forcats",
"ggplot2",
"ggsci",
"RColorBrewer",
"dplyr"
)
sapply(libraries, require)
install.packages("circlize")
install.packages("cowplot")
install.packages("factoextra")
install.packages("forcats")
install.packages("ggplot2")
install.packages("ggsci")
install.packages("RColorBrewer")
install.packages("dplyr")
### functions ###
import::here(.from = "./R/network_analysis/lib_network_analysis.R",
get_network,
VizSpots)
library(circlize)
library(cowplot)
library(forcats)
library(ggplot2)
library(ggsci)
library(RColorBrewer)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
################### libraries #########################
library(dplyr)
library(vegan)
library(broom)
library(reshape2)
library(ggpubr)
library(data.table)
library(wesanderson)
################### files #########################
general <- readRDS("./consolidated_results_NSF_general.Rds")
specific <- readRDS("./consolidated_results_NSF_specific.Rds")
theme <- readRDS("./consolidated_results_theme.Rds")
methods <- readRDS("./consolidated_results_methods.Rds")
budget <- readRDS("./consolidated_results_water budget.Rds")
################### functions #########################
remove_year_country <- function(df) {
df <- df %>%
filter(country != "Irrelevant") %>%
select(-c("year","country"))
return(df)
}
remove_year <- function(df) {
df <- df %>%
select(-c("year"))
return(df)
}
remove_country <- function(df) {
df <- df %>%
select(-c("country"))
return(df)
}
remove_irrelevant <- function(df) {
df <- df %>%
filter(country != "Irrelevant")
return(df)
}
diversity_country <- function(df) {
df <- df %>%
select(-c("year"))
df <- melt(df,
id.vars = c("country"))
df <- aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
df <- df %>%
rename(country = Group.1, sepcies = Group.2, population = x) # species is country*topic
df <- group_by(df, country)
df <- do(df, tidy(diversity(.$population)))
return(df)
}
diversity_LAC <- function(df) {
df <- colSums(df)
df <- diversity(df)
return(df)
}
col_sums <- function(df) {
df <- colSums(df)
df$key=rownames(df)
return(sumdf)
}
## define data frame
df <- remove_year(budget)
## define data frame
df <- remove_year(budget)
df <- remove_irrelevant(df)
df <- melt(df, id.vars = "country")
## count # papers per country
sums <- aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
remove <- as.data.frame(country_sums$country[country_sums$no.papers < 30]) # list countries w/ < 30 papers
keep <- as.data.frame(country_sums$country[country_sums$no.papers > 30])
## subset countries with > 30 papers
df<- subset(df, df$country %in% keep$`country_sums$country[country_sums$no.papers > 30]`)
sums <-aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
## calculate country + topic sums
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
topic_sums <- aggregate(sums$sum, by=list(sums$topic), FUN=sum)
names(topic_sums) = c("topic","sum")
## topic
topic_pick <- "reservoirs"
## topic
topic_pick <- "island and extreme weather"
topic_total <- topic_sums$sum[topic_sums$topic == topic_pick]
topic_subset <- subset(sums, topic == topic_pick)
topic_subset <- cbind(topic_subset, country_sums)
topic_subset[4] <- NULL
topic_subset$perc <- topic_subset$sum / topic_subset$no.papers * 100
ggdotchart(topic_subset,
x= "country", y = "perc",
rotate = TRUE, add = "segments", sorting = "descending",
title = topic_pick) +
xlab(NULL) +
ylab("Percent of research on topic")
topic_total <- topic_sums$sum[topic_sums$topic == topic_pick]
topic_sums <- aggregate(sums$sum, by=list(sums$topic), FUN=sum)
View(topic_sums)
## define data frame
df <- remove_year(theme)
df <- remove_irrelevant(df)
df <- melt(df, id.vars = "country")
## count # papers per country
sums <- aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
remove <- as.data.frame(country_sums$country[country_sums$no.papers < 30]) # list countries w/ < 30 papers
keep <- as.data.frame(country_sums$country[country_sums$no.papers > 30])
## subset countries with > 30 papers
df<- subset(df, df$country %in% keep$`country_sums$country[country_sums$no.papers > 30]`)
sums <-aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
## calculate country + topic sums
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
topic_sums <- aggregate(sums$sum, by=list(sums$topic), FUN=sum)
names(topic_sums) = c("topic","sum")
## topic
topic_pick <- "island and extreme weather"
topic_total <- topic_sums$sum[topic_sums$topic == topic_pick]
topic_subset <- subset(sums, topic == topic_pick)
topic_subset <- cbind(topic_subset, country_sums)
topic_subset[4] <- NULL
topic_subset$perc <- topic_subset$sum / topic_subset$no.papers * 100
ggdotchart(topic_subset,
x= "country", y = "perc",
rotate = TRUE, add = "segments", sorting = "descending",
title = topic_pick) +
xlab(NULL) +
ylab("Percent of research on topic")
library(dplyr)
library(reshape2)
en <- read.csv("./data/topic_names_en.csv")
View(en)
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv")
View(en)
en <- melt(en,
id.vars "NSF_specific_en" = )
en <- melt(en,
id.vars = "NSF_specific_en")
View(en)
en <- read.csv("./data/topic_names_en.csv")
en2 <- melt(en,
id.vars = "topic_id_en")
View(en2)
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv")
en2 <- melt(en,
id.vars = "topic_id")
es2 <- melt(es,
id.vars = "topic_id")
x <- rbine(en2,es2)
x <- rbind(en2,es2)
View(x)
pt2 <- melt(pt,
id.vars = "topic_id")
x <- rbind(en2,es2,pt2)
en$en <- "en"
View(en)
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = "topic_id")
es2 <- melt(es,
id.vars = "topic_id")
pt2 <- melt(pt,
id.vars = "topic_id")
x <- rbind(en2,es2,pt2)
en2 <- melt(en,
id.vars = c("topic_id","lang"))
View(en2)
library(dplyr)
library(reshape2)
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv")
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = "topic_id")
pt2 <- melt(pt,
id.vars = "topic_id")
x <- rbind(en2,es2,pt2)
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv")
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
View(x)
library(dplyr)
library(reshape2)
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv")
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
x2 <- x %>%
group_by(variable, lang) %>%
tally
View(x2)
x2 <- x %>%
group_by(variable, lang) %>%
tally %>%
filter(variable == "NSF_specific")
View(x2)
x2 <- x %>%
group_by(variable, lang) %>%
tally(value) %>%
filter(variable == "NSF_specific")
group_by(value, lang) %>%
tally
x2 <- x %>%
filter(variable == "NSF_specific")
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE,
dot.size = 4)
library(ggpubr)
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE,
dot.size = 4)
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE,
dot.size = 2)
View(pt)
pt <- read.csv("./data/topic_names_pt.csv", na.rm = TRUE)
pt <- read.csv("./data/topic_names_pt.csv", na.strings=c("","NA"))
View(pt)
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv", na.strings=c("","NA"))
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE,
dot.size = 2)
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE)
library(dplyr)
library(reshape2)
library(ggpubr)
en <- read.csv("./data/topic_names_en.csv")
es <- read.csv("./data/topic_names_es.csv")
pt <- read.csv("./data/topic_names_pt.csv", na.strings=c("","NA"))
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "type",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE)
ggdotchart(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
group = "lang",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
#group = "lang",
add = "segments",
add.params = list(color = "lightgray", size = 1),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
group = "lang",
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
color = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE,
sort.val = "desc")
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE,
sort.val = "desc")
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
color = "white"
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
color = "white",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
