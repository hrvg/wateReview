# heat map
x2$value<-factor(x2$value,levels=c("mathematics & statistics","social sciences","engineering","life sciences","physical sciences"))
names(x2) <- c("NSF general category", "language","number of LDA topics")
a <- ggplot(data = x2, aes(x = language, y = NSF general category)) +
geom_tile(aes(fill = number of LDA topics))
a
x2 <- x %>%
filter(variable == "NSF_general") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
# heat map
x2$value<-factor(x2$value,levels=c("mathematics & statistics","social sciences","engineering","life sciences","physical sciences"))
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n))
a
a <- a +
scale_fill_grey() +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a <- a +
scale_fill_grey(start = 0, end = 20) +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a <- a +
scale_fill_grey(start = 0, end = 20) +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a <- a +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a
x2 <- x %>%
filter(variable == "NSF_general") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
# heat map
x2$value<-factor(x2$value,levels=c("mathematics & statistics","social sciences","engineering","life sciences","physical sciences"))
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n))
a
a <- a +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a <- a +
scale_fill_grey +
theme_pubr() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")
a
a +
scale_fill_grey() +
labs(title= "LDA coverage",
y="NSF general categories", x = "LDA for each language")+
theme_pubr()
a +
scale_fill_gradient(low = cadetblue1, high = cadetblue4) +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a +
scale_fill_gradient(low = "cadetblue1", high = "cadetblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a +
scale_fill_gradient(low = "lightcyan", high = "lightcyan4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.7, height=0.7))
a
a +
scale_fill_gradient(low = "lightcyan", high = "lightcyan4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.9, height=0.9))
a
a +
scale_fill_gradient(low = "lightcyan", high = "lightcyan4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a +
scale_fill_gradient(low = "lightcyan", high = "lightcyan4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue14") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
plotly::ggplotly(a)
a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a<- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
plotly::ggplotly(a)
a<- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a
View(x)
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
View(x2)
######## graphing #############
ggbarplot(x2, x = "value", y = "n",
fill = "lang",
color = "white",
palette = c("#00AFBB", "#FC4E07",  "#E7B800"),
rotate = TRUE)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF general categories",
x = "LDA for each language")+
theme_pubr()
a
plotly::ggplotly(a)
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
######## filter #############
x2 <- x %>%
filter(variable == "NSF_general") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
## need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
## need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
# need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
filter(value != "NA") %>%
group_by(value, lang) %>%
tally
View(x2)
# need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
x2 <- na.rm(x2)
View(x)
x <- na.omit(x)
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
#filter(value != "NA") %>%
group_by(value, lang) %>%
tally
# need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
x <- rbind(en2,es2,pt2)
x <- na.omit(x)
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
# need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
x2 <- na.omit(x2)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
######## filter #############
x2 <- x %>%
filter(variable == "NSF_general") %>%
group_by(value, lang) %>%
tally
library(dplyr)
library(reshape2)
library(ggpubr)
library(tidyr)
library(ggplot2)
######## load data #############
en <- read.csv("./topic_names_en.csv")
es <- read.csv("./topic_names_es.csv")
pt <- read.csv("./topic_names_pt.csv", na.strings=c("","NA"))
en$lang <- "en"
es$lang <- "es"
pt$lang <- "pt"
en2 <- melt(en,
id.vars = c("topic_id","lang"))
es2 <- melt(es,
id.vars = c("topic_id","lang"))
pt2 <- melt(pt,
id.vars = c("topic_id","lang"))
x <- rbind(en2,es2,pt2)
x <- na.omit(x)
######## filter #############
x2 <- x %>%
filter(variable == "NSF_general") %>%
group_by(value, lang) %>%
tally
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
x2 <- na.omit(x2)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
######## filter #############
x2 <- x %>%
filter(variable == "NSF_specific") %>%
group_by(value, lang) %>%
tally
# need to order based on engligh numbers
lvls <- as.character(x2$value[x2$lang=="en"])[order(x2$n[x2$lang=="en"])]
x2$value <- factor(x2$value, levels = lvls)
x2 <- na.omit(x2)
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.97, height=0.97))
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
a <- ggplot(data = x2, aes(x = lang, y = value)) +
geom_tile(aes(fill = n, width=0.9, height=0.9)) # edit for specific vs. general
a
a <- a +
scale_fill_gradient(low = "lightsteelblue1", high = "lightsteelblue4") +
labs(title= "LDA coverage",
y="NSF specific categories",
x = "LDA for each language")+
theme_pubr()
a
View(en)
################### libraries #########################
library(dplyr)
library(vegan)
library(broom)
library(reshape2)
library(ggpubr)
library(data.table)
library(wesanderson)
specific <- readRDS("./consolidated_results_NSF_specific.Rds") # 45 themes
budget <- readRDS("./consolidated_results_water budget.Rds")
methods <- readRDS("./consolidated_results_methods.Rds")
setwd("~/R_code/LAC")
specific <- readRDS("./consolidated_results_NSF_specific.Rds") # 45 themes
methods <- readRDS("./consolidated_results_methods.Rds")
budget <- readRDS("./consolidated_results_water budget.Rds")
################### libraries #########################
library(dplyr)
library(vegan)
library(broom)
library(reshape2)
library(ggpubr)
library(data.table)
library(wesanderson)
setwd("~/R_code/LAC")
specific <- readRDS("./consolidated_results_NSF_specific.Rds") # 45 themes
methods <- readRDS("./consolidated_results_methods.Rds")
budget <- readRDS("./consolidated_results_water budget.Rds")
################### functions #########################
remove_year_country <- function(df) {
df <- df %>%
filter(country != "Irrelevant") %>%
select(-c("year","country"))
return(df)
}
remove_year <- function(df) {
df <- df %>%
select(-c("year"))
return(df)
}
remove_country <- function(df) {
df <- df %>%
select(-c("country"))
return(df)
}
remove_irrelevant <- function(df) {
df <- df %>%
filter(country != "Irrelevant")
return(df)
}
diversity_country <- function(df) {
df <- df %>%
select(-c("year"))
df <- melt(df,
id.vars = c("country"))
df <- aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
df <- df %>%
rename(country = Group.1, sepcies = Group.2, population = x) # species is country*topic
df <- group_by(df, country)
df <- do(df, tidy(diversity(.$population)))
return(df)
}
diversity_LAC <- function(df) {
df <- colSums(df)
df <- diversity(df)
return(df)
}
col_sums <- function(df) {
df <- colSums(df)
df$key=rownames(df)
return(sumdf)
}
## define data frame
df <- remove_year(budget)
df <- remove_irrelevant(df)
df <- melt(df, id.vars = "country")
View(df)
## count # papers per country
sums <- aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
View(sums)
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
View(country_sums)
remove <- as.data.frame(country_sums$country[country_sums$no.papers < 30]) # list countries w/ < 30 papers
keep <- as.data.frame(country_sums$country[country_sums$no.papers > 30])
## subset countries with > 30 papers
df<- subset(df, df$country %in% keep$`country_sums$country[country_sums$no.papers > 30]`)
sums <-aggregate(df$value, by=list(df$country,df$variable), FUN=sum)
names(sums) = c("country","topic","sum")
## calculate country + topic sums
country_sums <- aggregate(sums$sum, by=list(sums$country), FUN=sum) # no. papers per country
names(country_sums) = c("country","no.papers")
topic_sums <- aggregate(sums$sum, by=list(sums$topic), FUN=sum)
names(topic_sums) = c("topic","sum")
View(topic_sums)
a <- topic_sums
a$scale <- scale(a$sum)
View(a)
a$scale <- normalizePath(a$sum)
a$normal <- norm(a$sum)
a <- topic_sums
a$normal <- norm(a$sum)
a$normal <- normalize(a$sum, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
library(BBmisc)
a <- topic_sums
a$normal <- normalize(a$sum, method = "standardize", range = c(0, 1), margin = 1L, on.constant = "quiet")
View(a)
a$normal <- normalize(a$sum, method = "scale", range = c(0, 1), margin = 1L, on.constant = "quiet")
a$proportion <- lapply(a$proportion, function(a$sum) a$sum/sum(a$sum, na.rm=TRUE) )
library(qdap)
install.packages("qdap")
library(qdap)
a$prop <-prop(a$sum)
a$prop <-prop(a$sum, digits = 2, percent= FALSE, by.column = TRUE, round = FALSE)
a <- topic_sums
a$prop <-prop(a$sum, digits = 2, percent= FALSE, by.column = TRUE, round = FALSE)
a %>%
mutate(freq = sum / sum(sum))
a <- a %>%
mutate(freq = sum / sum(sum))
a <- a %>%
mutate(freq = sum / sum(sum)) %>%
mutate(perc = freq * 100)
a <- topic_sums
a <- a %>%
mutate(freq = sum / sum(sum)) %>%
mutate(perc = freq * 100)
topic_sums <- aggregate(sums$sum, by=list(sums$topic), FUN=sum)
names(topic_sums) = c("topic","sum")
topic_sums <- topic_sums %>%
mutate(freq = sum / sum(sum)) %>%
mutate(perc = freq * 100)
# includes all countries (not just with 30+ papers)
## diversity of topic research
topic_diversity <- sums %>%
group_by(topic) %>%
mutate(diversity.score = diversity(sum)) %>%
select(-c("country","sum")) %>%
distinct()
View(sums)
topic_diversity <- sums %>%
group_by(topic) %>%
mutate(diversity.score = diversity(sum)) %>%
select(-c("country","sum")) %>%
distinct()
topic_diversity <- sums %>%
group_by(topic) %>%
mutate(diversity.score = diversity(sum))
topic_diversity <- sums %>%
group_by(topic)
topic_diversity <- sums %>%
group_by(topic) %>%
mutate(diversity.score = diversity(sum))
topic_diversity <- sums %>%
group_by(topic) %>%
mutate(diversity.score = diversity(sum))
diversity(sums$sum)
