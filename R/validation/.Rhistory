english_corpus <- read.csv(file.path("data", "english_corpus.csv"))
english_corpus <- read.csv(file.path("../../data", "english_corpus.csv"))
english_corpus <- read.csv(file.path("../../data", "english_corpus.csv"))
validation_df_location <- read.csv(file.path("../../data", "validation_df_location.csv"))
head(english_corpus$pdfs)
tail(english_corpus$pdfs)
pdf_names <- sapply(english_corpus$pdfs, function(s){
strsplit(s, "/")
})
??strsplit
pdf_names <- lapply(english_corpus$pdfs, function(s){
strsplit(s, "/")
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
strsplit(as.character(s), "/")
})
pdf_names[[1]]
pdf_names[[2]]
pdf_names[[4]]
pdf_names <- sapply(english_corpus$pdfs, function(s){
strsplit(as.character(s), "/")
})
pdf_names[[1]]
pdf_names[1]
matrix??
??matrix
??base::matrix
pdf_splits <- matrix(unlist(pdf_names), ncol = 2, byrow = TRUE)
pdf_names <- lapply(english_corpus$pdfs, function(s){
strsplit(as.character(s), "/")[[1]]
})
table(sapply(unlist(pdf_names), nchar)))
table(sapply(unlist(pdf_names), nchar))
pdf_names <- lapply(english_corpus$pdfs, function(s){
strsplit(as.character(s), "/")[[2]]
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- strsplit(as.character(s), "/")
return(ifelse(len(ss) > 1, ss[[2]], ss[[1]]))
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- strsplit(as.character(s), "/")
return(ifelse(length(ss) > 1, ss[[2]], ss[[1]]))
})
table(sapply(unlist(pdf_names), nchar)))
table(sapply(unlist(pdf_names), nchar))
pdf_names[[1]]
pdf_names[[2]]
pdf_names[[3]]
View(english_corpus)
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- strsplit(as.character(s), "/")
return(ifelse(length(ss) > 1, ss[[2]], ss[[1]]))
})
pdf_names[[3]]
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[2]], ss[[1]]))
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names[[3]]
pdf_names[[1]]
pdf_names[[2]]
pdf_names[[105]]
ind <- which(pdf_names %in% validation_df_location$title)
length(ind)
dim(validation_df_location)
pdf_names[ind]
length(which(validation_df_location$title %in% pdf_names))
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
make_pretty_str <- function(string_list){
# This function takes care of some formatting issue that appeared in the process of aligning database coming from the query and from EndNote.
# The function removes alpha-numeric characters, some special characters, trim whitespaces and concatenate them.
# arg in: a list of string
# output: a cleaned list of string
nl <- gsub("[^[:alnum:][:space:]]", "",  string_list)
nl <- gsub("ltigt", " ",  nl)
nl <- gsub("\\s+", " ", nl)
nl <- trimws(nl)
return(nl)
}
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(pdf_names, validation_titles)
length(na.omit(ind))
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
# pdf_names <- make_pretty_str(pdf_names)
# validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(validation_df_location$title, pdf_names)
length(na.omit(ind))
ind
# pdf_names <- lapply(english_corpus$pdfs, function(s){
# 	ss <- unlist(strsplit(as.character(s), "/"))
# 	return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
# })
# pdf_names <- make_pretty_str(pdf_names)
# validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(validation_df_location$title, english_corpus$pdfs, duplicates.ok = TRUE)
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
# pdf_names <- make_pretty_str(pdf_names)
# validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(validation_df_location$title, pdf_names, duplicates.ok = TRUE)
summary(ind)
length(na.omit(ind))
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
validation_titles <- make_pretty_str(validation_df_location$title)
# ind <- pmatch(validation_df_location$title, pdf_names, duplicates.ok = TRUE)
ind <- pmatch(validation_titles, pdf_names, duplicates.ok = TRUE)
length(na.omit(ind))
??substr
pdf_names <- lapply(english_corpus$pdfs, function(s){
nc <- nchar(s)
ss <- substr(s, start = 10, stop = nc)
return(ss)
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
s <- as.character(s)
nc <- nchar(s)
ss <- substr(s, start = 10, stop = nc)
return(ss)
})
nchar(s)
pdf_names <- lapply(english_corpus$pdfs, function(s){
s <- as.character(s)
print(s)
nc <- nchar(s)
ss <- substr(s, start = 10, stop = nc)
return(ss)
})
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(validation_df_location$title, pdf_names, duplicates.ok = TRUE)
human_read_english_corpus <- english_corpus[na.omit(ind), ]
dim(human_read_english_corpus)
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
validation_titles <- make_pretty_str(validation_df_location$title)
ind <- pmatch(validation_titles, pdf_names, duplicates.ok = TRUE)
human_read_english_corpus <- english_corpus[na.omit(ind), ]
dim(human_read_english_corpus)
human_read_english_corpus[1]
human_read_english_corpus$pdfs[1]
validation_df_location$title
validation_df_location$title[1]
head(validation_df_location)
human_read_english_corpus <- english_corpus[na.omit(ind), ]
human_read_english_corpus <- cbind(human_read_english_corpus, validation_df_location[is.na(ind), -(1:3)])
is.na(ind)
dim(validation_df_location[!is.na(ind)])
human_read_english_corpus <- english_corpus[na.omit(ind), ]
human_read_english_corpus <- cbind(human_read_english_corpus, validation_df_location[!is.na(ind), -(1:3)])
head(human_read_english_corpus)
human_read_english_corpus <- english_corpus[na.omit(ind), ]
human_read_english_corpus <- cbind(human_read_english_corpus, validation_df_location[!is.na(ind), -(1:3)])
write.csv(human_read_english_corpus, file.path("../../data", "human_read_english_corpus.csv"))
human_read_english_corpus <- english_corpus[na.omit(ind), ]
human_read_english_corpus <- cbind(human_read_english_corpus, validation_df_location[!is.na(ind), -(1:3)])
write.csv(human_read_english_corpus, file.path("../../data", "human_read_english_corpus.csv"), row.names = FALSE)
topicDocs <- readRDS("/home/justpwd/thesis/data/latin_america/water-management/topic-model/data/topicDocs.Rds")
names(topicDocs)
dim(topicDocs)
ind2 <- charmatch(validation_titles, pdf_names, duplicates.ok = TRUE)
ind2 <- charmatch(validation_titles, pdf_names)
length(na.omit(ind2))
length(na.omit(ind))
pdf_names <- lapply(english_corpus$pdfs, function(s){
ss <- unlist(strsplit(as.character(s), "/"))
return(ifelse(length(ss) == 1, ss[[1]], ss[[2]]))
})
pdf_names <- make_pretty_str(pdf_names)
validation_titles <- make_pretty_str(validation_df_location$title)
ind <- charmatch(validation_titles, pdf_names, duplicates.ok = TRUE)
human_read_english_corpus <- english_corpus[na.omit(ind), ]
human_read_english_corpus <- cbind(human_read_english_corpus, validation_df_location[!is.na(ind), -(1:3)])
write.csv(human_read_english_corpus, file.path("../../data", "human_read_english_corpus.csv"), row.names = FALSE)
head(human_read_english_corpus)
head(human_read_english_corpus$pdfs)
head(validation_df_location$title)
head(c(validation_df_location$title))
